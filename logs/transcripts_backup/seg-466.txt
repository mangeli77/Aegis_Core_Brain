[2025-07-06T00:00:465Z] (neutral) Êauto-clean-and-rename.js [#??? script #seg-466]
[2025-07-06T00:00:465Z] (neutral)  [#?? save this to #seg-466]
[2025-07-06T00:00:465Z] (neutral) aegis-soul/scripts/auto-clean-and-rename.js [#system #seg-466]
[2025-07-06T00:00:465Z] (neutral) Êauto-clean-and-rename.js [#??? script #seg-466]
[2025-07-06T00:00:465Z] (neutral)  [#?? save this to #seg-466]
[2025-07-06T00:00:465Z] (neutral) aegis-soul/scripts/auto-clean-and-rename.js [#system #seg-466]
[2025-07-06T00:00:465Z] (neutral) true }); if (fs.existsSync(script)) { fs.renameSync(script, path.join(archiveDir, 'repair-paths-after-rename.js')); console.log('?? Archived repair-paths-after-rename.js'); } } // ========== 4. DELETE .bak FILES ========== function deleteBakFiles() { execSync(`find ${root} -type f -name "*.bak" -delete`); console.log('?? Deleted all .bak files'); } // EXECUTE console.log('?? Starting auto-clean and rename...'); performRenames(); movePhase30(); archiveRepairScript(); deleteBakFiles(); console.log('\n? Project cleaned, renamed, and aligned with AEGIS-SOUL conventions.'); [#// scripts/auto-clean-and-rename.js const fs = require('fs'); const path = require('path'); const { execsync } = require('child_process'); const root = path.resolve(__dirname, '..'); const core = path.join(root, 'aegis-core'); const archivedir = path.join(core, 'scripts', '_archive'); const lockpointroot = path.join(root, '.lockpoint'); const lockpointincore = path.join(core, '.lockpoint'); // ========== 1. renames ========== function saferename(oldrel, newrel) { const oldpath = path.join(root, oldrel); const newpath = path.join(root, newrel); if (fs.existssync(oldpath)) { fs.renamesync(oldpath, newpath); console.log(`?? renamed ${oldrel} ? ${newrel}`); } } function performrenames() { saferename('aegis-core.js', 'soul-core.js'); saferename('aegis_memory.txt', 'legacy_memory_log.txt'); saferename('manifesto.txt', 'manifesto_root.txt'); } // ========== 2. move phase_30 out of core ========== function movephase30() { const from = path.join(lockpointincore, 'phase_30'); const to = path.join(lockpointroot, 'phase_30'); if (fs.existssync(from)) { fs.renamesync(from, to); console.log(`?? moved phase_30 to root .lockpoint/`); } } // ========== 3. archive old script ========== function archiverepairscript() { const script = path.join(root, 'scripts', 'repair-paths-after-rename.js'); if (!fs.existssync(archivedir)) fs.mkdirsync(archivedir, { recursive #seg-466]
[2025-07-06T00:00:465Z] (neutral) Êauto-clean-and-rename.js [#??? script #seg-466]
[2025-07-06T00:00:465Z] (neutral)  [#?? save this to #seg-466]
[2025-07-06T00:00:465Z] (neutral) aegis-soul/scripts/auto-clean-and-rename.js [#system #seg-466]
[2025-07-06T00:00:465Z] (neutral) true }); if (fs.existsSync(script)) { fs.renameSync(script, path.join(archiveDir, 'repair-paths-after-rename.js')); console.log('?? Archived repair-paths-after-rename.js'); } } // ========== 4. DELETE .bak FILES ========== function deleteBakFiles() { execSync(`find ${root} -type f -name "*.bak" -delete`); console.log('?? Deleted all .bak files'); } // EXECUTE console.log('?? Starting auto-clean and rename...'); performRenames(); movePhase30(); archiveRepairScript(); deleteBakFiles(); console.log('\n? Project cleaned, renamed, and aligned with AEGIS-SOUL conventions.'); [#// scripts/auto-clean-and-rename.js const fs = require('fs'); const path = require('path'); const { execsync } = require('child_process'); const root = path.resolve(__dirname, '..'); const core = path.join(root, 'aegis-core'); const archivedir = path.join(core, 'scripts', '_archive'); const lockpointroot = path.join(root, '.lockpoint'); const lockpointincore = path.join(core, '.lockpoint'); // ========== 1. renames ========== function saferename(oldrel, newrel) { const oldpath = path.join(root, oldrel); const newpath = path.join(root, newrel); if (fs.existssync(oldpath)) { fs.renamesync(oldpath, newpath); console.log(`?? renamed ${oldrel} ? ${newrel}`); } } function performrenames() { saferename('aegis-core.js', 'soul-core.js'); saferename('aegis_memory.txt', 'legacy_memory_log.txt'); saferename('manifesto.txt', 'manifesto_root.txt'); } // ========== 2. move phase_30 out of core ========== function movephase30() { const from = path.join(lockpointincore, 'phase_30'); const to = path.join(lockpointroot, 'phase_30'); if (fs.existssync(from)) { fs.renamesync(from, to); console.log(`?? moved phase_30 to root .lockpoint/`); } } // ========== 3. archive old script ========== function archiverepairscript() { const script = path.join(root, 'scripts', 'repair-paths-after-rename.js'); if (!fs.existssync(archivedir)) fs.mkdirsync(archivedir, { recursive #seg-466]
