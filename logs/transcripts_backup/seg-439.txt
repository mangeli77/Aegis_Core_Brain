[2025-07-06T00:00:438Z] (neutral) Êfinalize-soul-structure.js [#? final script #seg-439]
[2025-07-06T00:00:438Z] (neutral)  [#?? save this file to #seg-439]
[2025-07-06T00:00:438Z] (neutral) aegis-soul/scripts/finalize-soul-structure.js [#system #seg-439]
[2025-07-06T00:00:438Z] (neutral) Êfinalize-soul-structure.js [#? final script #seg-439]
[2025-07-06T00:00:438Z] (neutral)  [#?? save this file to #seg-439]
[2025-07-06T00:00:438Z] (neutral) aegis-soul/scripts/finalize-soul-structure.js [#system #seg-439]
[2025-07-06T00:00:438Z] (neutral) ${file}`); } }); } // EXECUTION console.log('?? Finalizing AEGIS-SOUL structure...'); cleanBackups(); writeRootReadme(); writeEditorConfig(); writeGitignore(); updatePhaseMapHeader(); archiveScripts(); console.log('\n? All clean. Soul is polished and production-ready.'); [#// scripts/finalize-soul-structure.js const fs = require('fs'); const path = require('path'); const execsync = require('child_process').execsync; const root = path.join(__dirname, '..'); // /aegis-soul const core = path.join(root, 'aegis-core'); // /aegis-soul/aegis-core // 1. delete .bak files function cleanbackups() { console.log('?? removing .bak files...'); execsync(`find ${core} -type f -name "*.bak" -delete`); } // 2. create aegis-soul/readme.md function writerootreadme() { const readmepath = path.join(root, 'readme.md'); const content = `# ?? aegis-soul **aegissoul** is an ambient ai companion built for memory, mood, protection, and presence. --- ## ?? structure - \`aegis-core/\` ð cognitive engine modules - \`phase_map.md\` ð milestone map of system evolution - \`.lockpoint/\` ð snapshots, logs, and queue state - \`scripts/\` ð setup, repair, and development scripts --- ## ?? running aegissoul \`\`\`bash cd aegis-soul node aegis-core/soul-core.js \`\`\` --- ## ?? phases each development milestone is versioned inside \`.lockpoint/phase_xx\`. use snapshots and queue files to evolve the system in modular steps. > *"soul is the vessel. core is the flame. aegis is the guide."* `; fs.writefilesync(readmepath, content); console.log('?? created readme.md'); } // 3. create .editorconfig function writeeditorconfig() { const pathec = path.join(root, '.editorconfig'); const content = `root = true [*] charset = utf-8 indent_style = space indent_size = 2 end_of_line = lf insert_final_newline = true trim_trailing_whitespace = true `; fs.writefilesync(pathec, content); console.log('?? created .editorconfig'); } // 4. create .gitignore function writegitignore() { const pathgi = path.join(root, '.gitignore'); const content = `node_modules/ .lockpoint/phase_*/logs/ .lockpoint/phase_*/queue/ *.bak *.log .env archive/ `; fs.writefilesync(pathgi, content); console.log('?? created .gitignore'); } // 5. update phase_map.md header function updatephasemapheader() { const pathmap = path.join(core, 'phase_map.md'); if (!fs.existssync(pathmap)) return console.log('?? no phase_map.md found.'); let mapcontent = fs.readfilesync(pathmap, 'utf8'); mapcontent = mapcontent.replace(/^# .*phase map/, '# ?? aegis-soul phase map'); fs.writefilesync(pathmap, mapcontent); console.log('?? updated phase_map.md header'); } // 6. archive old scripts function archivescripts() { const scriptdir = path.join(core, 'scripts'); const archivedir = path.join(scriptdir, '_archive'); if (!fs.existssync(archivedir)) fs.mkdirsync(archivedir); const files = fs.readdirsync(scriptdir); files.foreach(file => { if (file.startswith('setup-') || file.startswith('repair-')) { const src = path.join(scriptdir, file); const dest = path.join(archivedir, file); fs.renamesync(src, dest); console.log(`?? archived #seg-439]
[2025-07-06T00:00:438Z] (neutral) Êfinalize-soul-structure.js [#? final script #seg-439]
[2025-07-06T00:00:438Z] (neutral)  [#?? save this file to #seg-439]
[2025-07-06T00:00:438Z] (neutral) aegis-soul/scripts/finalize-soul-structure.js [#system #seg-439]
[2025-07-06T00:00:438Z] (neutral) ${file}`); } }); } // EXECUTION console.log('?? Finalizing AEGIS-SOUL structure...'); cleanBackups(); writeRootReadme(); writeEditorConfig(); writeGitignore(); updatePhaseMapHeader(); archiveScripts(); console.log('\n? All clean. Soul is polished and production-ready.'); [#// scripts/finalize-soul-structure.js const fs = require('fs'); const path = require('path'); const execsync = require('child_process').execsync; const root = path.join(__dirname, '..'); // /aegis-soul const core = path.join(root, 'aegis-core'); // /aegis-soul/aegis-core // 1. delete .bak files function cleanbackups() { console.log('?? removing .bak files...'); execsync(`find ${core} -type f -name "*.bak" -delete`); } // 2. create aegis-soul/readme.md function writerootreadme() { const readmepath = path.join(root, 'readme.md'); const content = `# ?? aegis-soul **aegissoul** is an ambient ai companion built for memory, mood, protection, and presence. --- ## ?? structure - \`aegis-core/\` ð cognitive engine modules - \`phase_map.md\` ð milestone map of system evolution - \`.lockpoint/\` ð snapshots, logs, and queue state - \`scripts/\` ð setup, repair, and development scripts --- ## ?? running aegissoul \`\`\`bash cd aegis-soul node aegis-core/soul-core.js \`\`\` --- ## ?? phases each development milestone is versioned inside \`.lockpoint/phase_xx\`. use snapshots and queue files to evolve the system in modular steps. > *"soul is the vessel. core is the flame. aegis is the guide."* `; fs.writefilesync(readmepath, content); console.log('?? created readme.md'); } // 3. create .editorconfig function writeeditorconfig() { const pathec = path.join(root, '.editorconfig'); const content = `root = true [*] charset = utf-8 indent_style = space indent_size = 2 end_of_line = lf insert_final_newline = true trim_trailing_whitespace = true `; fs.writefilesync(pathec, content); console.log('?? created .editorconfig'); } // 4. create .gitignore function writegitignore() { const pathgi = path.join(root, '.gitignore'); const content = `node_modules/ .lockpoint/phase_*/logs/ .lockpoint/phase_*/queue/ *.bak *.log .env archive/ `; fs.writefilesync(pathgi, content); console.log('?? created .gitignore'); } // 5. update phase_map.md header function updatephasemapheader() { const pathmap = path.join(core, 'phase_map.md'); if (!fs.existssync(pathmap)) return console.log('?? no phase_map.md found.'); let mapcontent = fs.readfilesync(pathmap, 'utf8'); mapcontent = mapcontent.replace(/^# .*phase map/, '# ?? aegis-soul phase map'); fs.writefilesync(pathmap, mapcontent); console.log('?? updated phase_map.md header'); } // 6. archive old scripts function archivescripts() { const scriptdir = path.join(core, 'scripts'); const archivedir = path.join(scriptdir, '_archive'); if (!fs.existssync(archivedir)) fs.mkdirsync(archivedir); const files = fs.readdirsync(scriptdir); files.foreach(file => { if (file.startswith('setup-') || file.startswith('repair-')) { const src = path.join(scriptdir, file); const dest = path.join(archivedir, file); fs.renamesync(src, dest); console.log(`?? archived #seg-439]
