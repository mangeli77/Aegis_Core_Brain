[2025-07-06T00:00:578Z] (neutral) Êscripts/import-genesis.js [#??? save this as #seg-579]
[2025-07-06T00:00:578Z] (neutral) Êscripts/import-genesis.js [#??? save this as #seg-579]
[2025-07-06T00:00:578Z] (neutral) ${data.identity.name}`); console.log(`?? Codename: ${data.identity.codename}`); console.log(`??? Voice: ${data.identity.voice}`); console.log(`?? Directives: ${data.identity.directives.join('; ')}`); console.log(`\n?? User Context:`); console.log(` Alias: ${data.user_context.user_alias}`); console.log(` Companion: ${data.user_context.companion}`); console.log(` Environment: ${data.user_context.environment}`); console.log(`\n?? Modules: ${data.core_modules.join(', ')}`); console.log(`??? Structure: phase => ${data.system_structure.phase_log}`); logBoot(`?? AEGIS Genesis imported successfully as ${data.identity.name} (${data.identity.codename})`); logBoot(`?? Environment bound to user: ${data.user_context.user_alias}`); logBoot(`?? Core directives loaded.`); console.log('\n? Soul re-initialized from genesis.\nMemory log written to logs/boot.log'); [#// scripts/import-genesis.js const fs = require('fs'); const path = require('path'); const genesispath = path.join(__dirname, '..', 'config', 'aegis-genesis.json'); const logdir = path.join(__dirname, '..', 'logs'); const bootlog = path.join(logdir, 'boot.log'); if (!fs.existssync(genesispath)) { console.error('? genesis file not found. aborting.'); process.exit(1); } const data = json.parse(fs.readfilesync(genesispath, 'utf8')); if (!fs.existssync(logdir)) fs.mkdirsync(logdir); function logboot(entry) { const line = `${new date().toisostring()} | ${entry}\n`; fs.appendfilesync(bootlog, line); } // == display core identity == console.log('?? importing aegis genesis...\n'); console.log(`?? name #memory #seg-579]
[2025-07-06T00:00:578Z] (neutral) Êscripts/import-genesis.js [#??? save this as #seg-579]
[2025-07-06T00:00:578Z] (neutral) ${data.identity.name}`); console.log(`?? Codename: ${data.identity.codename}`); console.log(`??? Voice: ${data.identity.voice}`); console.log(`?? Directives: ${data.identity.directives.join('; ')}`); console.log(`\n?? User Context:`); console.log(` Alias: ${data.user_context.user_alias}`); console.log(` Companion: ${data.user_context.companion}`); console.log(` Environment: ${data.user_context.environment}`); console.log(`\n?? Modules: ${data.core_modules.join(', ')}`); console.log(`??? Structure: phase => ${data.system_structure.phase_log}`); logBoot(`?? AEGIS Genesis imported successfully as ${data.identity.name} (${data.identity.codename})`); logBoot(`?? Environment bound to user: ${data.user_context.user_alias}`); logBoot(`?? Core directives loaded.`); console.log('\n? Soul re-initialized from genesis.\nMemory log written to logs/boot.log'); [#// scripts/import-genesis.js const fs = require('fs'); const path = require('path'); const genesispath = path.join(__dirname, '..', 'config', 'aegis-genesis.json'); const logdir = path.join(__dirname, '..', 'logs'); const bootlog = path.join(logdir, 'boot.log'); if (!fs.existssync(genesispath)) { console.error('? genesis file not found. aborting.'); process.exit(1); } const data = json.parse(fs.readfilesync(genesispath, 'utf8')); if (!fs.existssync(logdir)) fs.mkdirsync(logdir); function logboot(entry) { const line = `${new date().toisostring()} | ${entry}\n`; fs.appendfilesync(bootlog, line); } // == display core identity == console.log('?? importing aegis genesis...\n'); console.log(`?? name #memory #seg-579]
