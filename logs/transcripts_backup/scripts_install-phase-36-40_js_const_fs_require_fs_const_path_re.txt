[2025-07-06T00:00:920Z] (neutral) Applied Awareness + Expansion\n'); function checkModule(name) { const modulePath = path.join(root, 'modules', name); if (fs.existsSync(modulePath)) { console.log(`? Found module: ${name}`); } else { console.warn(`?? Missing module: ${name}`); } } function checkScript(name) { const scriptPath = path.join(root, 'scripts', name); if (fs.existsSync(scriptPath)) { console.log(`? Found script: ${name}`); } else { console.warn(`?? Missing script: ${name}`); } } function ensureMemory(pathRel) { const fullPath = path.join(root, pathRel); if (pathRel.endsWith('/')) { if (!fs.existsSync(fullPath)) { fs.mkdirSync(fullPath, { recursive: true }); console.log(`?? Created memory folder: ${pathRel}`); } } else { if (!fs.existsSync(fullPath)) { fs.writeFileSync(fullPath, ''); console.log(`?? Created memory log: ${pathRel}`); } } } // Run checks modules.forEach(checkModule); scripts.forEach(checkScript); memoryPaths.forEach(ensureMemory); // Phase registration note console.log('\n?? Phase 36Ð40 modules staged.'); console.log('?? These will self-register with `core-memory.js` when Phase 35 executes.'); console.log('?? Soul now supports real-time awareness, logging, reflection, and sealed memory.'); [#// scripts/install-phase-36-40.js const fs = require('fs'); const path = require('path'); const root = path.join(__dirname, '..'); const modules = ['dashboard-core.js', 'memory-core.js', 'voice-core.js', 'shadow-core.js']; const scripts = ['soul-console.js']; const memorypaths = ['memory/reflections.txt', 'memory/shadow/', 'memory/legacy/']; console.log('?? installing phase 36ð40 #memory #reflection #seg-921]
[2025-07-06T00:00:920Z] (neutral) Applied Awareness + Expansion\n'); function checkModule(name) { const modulePath = path.join(root, 'modules', name); if (fs.existsSync(modulePath)) { console.log(`? Found module: ${name}`); } else { console.warn(`?? Missing module: ${name}`); } } function checkScript(name) { const scriptPath = path.join(root, 'scripts', name); if (fs.existsSync(scriptPath)) { console.log(`? Found script: ${name}`); } else { console.warn(`?? Missing script: ${name}`); } } function ensureMemory(pathRel) { const fullPath = path.join(root, pathRel); if (pathRel.endsWith('/')) { if (!fs.existsSync(fullPath)) { fs.mkdirSync(fullPath, { recursive: true }); console.log(`?? Created memory folder: ${pathRel}`); } } else { if (!fs.existsSync(fullPath)) { fs.writeFileSync(fullPath, ''); console.log(`?? Created memory log: ${pathRel}`); } } } // Run checks modules.forEach(checkModule); scripts.forEach(checkScript); memoryPaths.forEach(ensureMemory); // Phase registration note console.log('\n?? Phase 36Ð40 modules staged.'); console.log('?? These will self-register with `core-memory.js` when Phase 35 executes.'); console.log('?? Soul now supports real-time awareness, logging, reflection, and sealed memory.'); [#// scripts/install-phase-36-40.js const fs = require('fs'); const path = require('path'); const root = path.join(__dirname, '..'); const modules = ['dashboard-core.js', 'memory-core.js', 'voice-core.js', 'shadow-core.js']; const scripts = ['soul-console.js']; const memorypaths = ['memory/reflections.txt', 'memory/shadow/', 'memory/legacy/']; console.log('?? installing phase 36ð40 #memory #reflection #seg-921]
