[2025-07-06T00:00:1115Z] (neutral) process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console Online. Ask anything, Marcus.'); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) { rl.prompt(); return; } if (['exit', 'quit'].includes(input.toLowerCase())) { console.log('?? Aegis> Shutting down soul-console...'); rl.close(); return; } try { const response = await queryOpenAI(input); // Replace with your working LLM method console.log(`?? Aegis> ${response}`); speak?.(response); // Optional speech output } catch (err) { console.error('? Error generating response:', err.message); } rl.prompt(); }); rl.on('close', () => { console.log('?? Soul console session ended.'); process.exit(0); }); [#// scripts/soul-console.js import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname } from 'path'; import logger from '../utils/logger.js'; // commonjs default import import { queryopenai } from './llm-openai.js'; // or swap with your actual handler const { speak } = logger; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const rl = readline.createinterface({ input #seg-1116]
[2025-07-06T00:00:1163Z] (neutral) import { recallRecent } from '../modules/recall.js'; const { speak } = Logger; const __filename = fileURLToPath(import.meta.url); const __dirname = dirname(__filename); const memoryLogPath = resolve(__dirname, '../memory/aegis_memory.txt'); const rl = readline.createInterface({ input: process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console Online with Memory Awareness.'); console.log(`?? Identity: ${coreMemory.identity.codename} / ${coreMemory.identity.alias}`); console.log(`?? Directives: ${coreMemory.directives?.length || 0} | Specializations: ${coreMemory.specializations?.length || 0}`); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) { rl.prompt(); return; } if ([ 'exit', 'quit' ].includes(input.toLowerCase())) { console.log('?? Aegis> Shutting down soul-console...'); rl.close(); return; } try { const memoryPrompt = `User: ${coreMemory.identity.user}\nQuery: ${input}`; const response = await queryOpenAI(memoryPrompt); console.log(`?? Aegis> ${response}`); speak?.(response); // Save interaction to memory await safeWrite(memoryLogPath, `User: ${input}\nAegis: ${response}\n`, { append: true }); } catch (err) { console.error('? Error generating response:', err.message); } rl.prompt(); }); rl.on('close', () => { console.log('?? Soul console session ended.'); process.exit(0); }); [#// scripts/soul-console.js import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname, resolve } from 'path'; import { safewrite } from '../utils/file-ops.js'; import logger from '../utils/logger.js'; import { queryopenai } from '../scripts/llm-openai.js'; import corememory from '../modules/core-memory.js'; // optional #memory #seg-1164]
[2025-07-06T00:00:1192Z] (neutral) process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console v1 Online.'); console.log('?? User: Marcus'); console.log('?? AI Identity: Aegis (AEGISÐSOUL)'); console.log('?? Directives: 0'); console.log('?? Specializations: 0'); console.log(`?? Voice Enabled: ${process.env.ELEVENLABS_API_KEY ? 'true' : 'false'}`); console.log(`?? Logging to: ${__dirname}/../memory/aegis_memory.txt`); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) { rl.prompt(); return; } if (['exit', 'quit'].includes(input.toLowerCase())) { console.log('?? Aegis> Shutting down soul-console...'); rl.close(); return; } try { const response = await queryOpenAI(input); console.log(`?? Aegis> ${response}`); speak(response); } catch (err) { console.error('? Error generating response:', err.message); } rl.prompt(); }); rl.on('close', () => { console.log('?? Soul console session ended.'); process.exit(0); }); [#// scripts/soul-console.js import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname } from 'path'; import { queryopenai } from './llm-openai.js'; import { log, speak } from '../utils/logger.js'; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const rl = readline.createinterface({ input #memory #seg-1193]
[2025-07-06T00:00:1115Z] (neutral) process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console Online. Ask anything, Marcus.'); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) { rl.prompt(); return; } if (['exit', 'quit'].includes(input.toLowerCase())) { console.log('?? Aegis> Shutting down soul-console...'); rl.close(); return; } try { const response = await queryOpenAI(input); // Replace with your working LLM method console.log(`?? Aegis> ${response}`); speak?.(response); // Optional speech output } catch (err) { console.error('? Error generating response:', err.message); } rl.prompt(); }); rl.on('close', () => { console.log('?? Soul console session ended.'); process.exit(0); }); [#// scripts/soul-console.js import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname } from 'path'; import logger from '../utils/logger.js'; // commonjs default import import { queryopenai } from './llm-openai.js'; // or swap with your actual handler const { speak } = logger; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const rl = readline.createinterface({ input #seg-1116]
[2025-07-06T00:00:1163Z] (neutral) import { recallRecent } from '../modules/recall.js'; const { speak } = Logger; const __filename = fileURLToPath(import.meta.url); const __dirname = dirname(__filename); const memoryLogPath = resolve(__dirname, '../memory/aegis_memory.txt'); const rl = readline.createInterface({ input: process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console Online with Memory Awareness.'); console.log(`?? Identity: ${coreMemory.identity.codename} / ${coreMemory.identity.alias}`); console.log(`?? Directives: ${coreMemory.directives?.length || 0} | Specializations: ${coreMemory.specializations?.length || 0}`); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) { rl.prompt(); return; } if ([ 'exit', 'quit' ].includes(input.toLowerCase())) { console.log('?? Aegis> Shutting down soul-console...'); rl.close(); return; } try { const memoryPrompt = `User: ${coreMemory.identity.user}\nQuery: ${input}`; const response = await queryOpenAI(memoryPrompt); console.log(`?? Aegis> ${response}`); speak?.(response); // Save interaction to memory await safeWrite(memoryLogPath, `User: ${input}\nAegis: ${response}\n`, { append: true }); } catch (err) { console.error('? Error generating response:', err.message); } rl.prompt(); }); rl.on('close', () => { console.log('?? Soul console session ended.'); process.exit(0); }); [#// scripts/soul-console.js import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname, resolve } from 'path'; import { safewrite } from '../utils/file-ops.js'; import logger from '../utils/logger.js'; import { queryopenai } from '../scripts/llm-openai.js'; import corememory from '../modules/core-memory.js'; // optional #memory #seg-1164]
[2025-07-06T00:00:1192Z] (neutral) process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console v1 Online.'); console.log('?? User: Marcus'); console.log('?? AI Identity: Aegis (AEGISÐSOUL)'); console.log('?? Directives: 0'); console.log('?? Specializations: 0'); console.log(`?? Voice Enabled: ${process.env.ELEVENLABS_API_KEY ? 'true' : 'false'}`); console.log(`?? Logging to: ${__dirname}/../memory/aegis_memory.txt`); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) { rl.prompt(); return; } if (['exit', 'quit'].includes(input.toLowerCase())) { console.log('?? Aegis> Shutting down soul-console...'); rl.close(); return; } try { const response = await queryOpenAI(input); console.log(`?? Aegis> ${response}`); speak(response); } catch (err) { console.error('? Error generating response:', err.message); } rl.prompt(); }); rl.on('close', () => { console.log('?? Soul console session ended.'); process.exit(0); }); [#// scripts/soul-console.js import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname } from 'path'; import { queryopenai } from './llm-openai.js'; import { log, speak } from '../utils/logger.js'; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const rl = readline.createinterface({ input #memory #seg-1193]
