[2025-07-06T00:00:386Z] (productive) RENAME systems ? modules ========== const oldSystems = path.join(root, 'systems'); const newModules = path.join(root, 'modules'); if (fs.existsSync(oldSystems)) { fs.renameSync(oldSystems, newModules); console.log('? Renamed "systems" to "modules"'); } else { console.log('?? "systems" folder not found Ñ skipping rename.'); } // ========== STEP 2: UPDATE IMPORT PATHS ========== function updateImports(dir) { fs.readdirSync(dir).forEach(file => { const fullPath = path.join(dir, file); if (fs.statSync(fullPath).isDirectory()) { updateImports(fullPath); } else if (file.endsWith('.js')) { let content = fs.readFileSync(fullPath, 'utf8'); const replaced = content.replace(/(['"])\.\/systems\//g, "$1./modules/"); if (content !== replaced) { fs.writeFileSync(fullPath, replaced, 'utf8'); console.log(`?? Updated imports in ${path.relative(root, fullPath)}`); } } }); } updateImports(root); // ========== STEP 3: CREATE phase_31 STRUCTURE ========== const phase31 = path.join(root, '.lockpoint', 'phase_31'); ['config', 'logs', 'queue'].forEach(sub => { const dirPath = path.join(phase31, sub); if (!fs.existsSync(dirPath)) { fs.mkdirSync(dirPath, { recursive: true }); console.log(`?? Created ${path.relative(root, dirPath)}`); } }); // ========== STEP 4: CREATE PHASE_MAP.md ========== const mapPath = path.join(root, 'PHASE_MAP.md'); const phaseMapContent = `# ?? AEGIS Phase Map | Phase | Title | Date | Key Modules | Status | |-------|-------------------------------------------|--------------|-----------------------------------------------|---------------| | 30 | Memory Compression + Archival | 2025-07-01 | archive.js, memory_core.js, recall.js | ? Completed | | 31 | Feedback Loop + Reinforcement Logic | 2025-07-01 | feedback.js, trustmap.js, sentiment.js | ? In Progress | | 32 | Perceptive Input + Visual Refinement | TBD | observer.js, signal.js, sentiment.js | ?? Planned | > Each phase is checkpointed in \`.lockpoint/phase_XX/\` with config, logs, and queued tasks. `; fs.writeFileSync(mapPath, phaseMapContent); console.log(`?? Created PHASE_MAP.md`); [#// scripts/setup-phase-31.js const fs = require('fs'); const path = require('path'); const root = path.join(__dirname, '..'); // ========== step 1 #memory #trust #seg-387]
[2025-07-06T00:00:386Z] (productive) RENAME systems ? modules ========== const oldSystems = path.join(root, 'systems'); const newModules = path.join(root, 'modules'); if (fs.existsSync(oldSystems)) { fs.renameSync(oldSystems, newModules); console.log('? Renamed "systems" to "modules"'); } else { console.log('?? "systems" folder not found Ñ skipping rename.'); } // ========== STEP 2: UPDATE IMPORT PATHS ========== function updateImports(dir) { fs.readdirSync(dir).forEach(file => { const fullPath = path.join(dir, file); if (fs.statSync(fullPath).isDirectory()) { updateImports(fullPath); } else if (file.endsWith('.js')) { let content = fs.readFileSync(fullPath, 'utf8'); const replaced = content.replace(/(['"])\.\/systems\//g, "$1./modules/"); if (content !== replaced) { fs.writeFileSync(fullPath, replaced, 'utf8'); console.log(`?? Updated imports in ${path.relative(root, fullPath)}`); } } }); } updateImports(root); // ========== STEP 3: CREATE phase_31 STRUCTURE ========== const phase31 = path.join(root, '.lockpoint', 'phase_31'); ['config', 'logs', 'queue'].forEach(sub => { const dirPath = path.join(phase31, sub); if (!fs.existsSync(dirPath)) { fs.mkdirSync(dirPath, { recursive: true }); console.log(`?? Created ${path.relative(root, dirPath)}`); } }); // ========== STEP 4: CREATE PHASE_MAP.md ========== const mapPath = path.join(root, 'PHASE_MAP.md'); const phaseMapContent = `# ?? AEGIS Phase Map | Phase | Title | Date | Key Modules | Status | |-------|-------------------------------------------|--------------|-----------------------------------------------|---------------| | 30 | Memory Compression + Archival | 2025-07-01 | archive.js, memory_core.js, recall.js | ? Completed | | 31 | Feedback Loop + Reinforcement Logic | 2025-07-01 | feedback.js, trustmap.js, sentiment.js | ? In Progress | | 32 | Perceptive Input + Visual Refinement | TBD | observer.js, signal.js, sentiment.js | ?? Planned | > Each phase is checkpointed in \`.lockpoint/phase_XX/\` with config, logs, and queued tasks. `; fs.writeFileSync(mapPath, phaseMapContent); console.log(`?? Created PHASE_MAP.md`); [#// scripts/setup-phase-31.js const fs = require('fs'); const path = require('path'); const root = path.join(__dirname, '..'); // ========== step 1 #memory #trust #seg-387]
