[2025-07-06T00:00:580Z] (neutral) AEGIS-SOUL ?? Codename: Soul ??? Voice: Voice 2 Ñ Jarvis-inspired with a guiding presence ?? Directives: Serve as a loyal AI co-pilot... ?? User Context: Alias: Marcus Companion: Jack (the cat) ... [#?? name #seg-581]
[2025-07-06T00:00:1163Z] (neutral) "soul_console_memory", "type": "code/javascript", "content": "// scripts/soul-console.js\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport { safeWrite } from '../utils/file-ops.js';\nimport Logger from '../utils/logger.js';\nimport { queryOpenAI } from '../scripts/llm-openai.js';\nimport coreMemory from '../modules/core-memory.js';\n// Optional: import { recallRecent } from '../modules/recall.js';\n\nconst { speak } = Logger;\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst memoryLogPath = resolve(__dirname, '../memory/aegis_memory.txt');\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console Online with Memory Awareness.');\nconsole.log(?? Identity: ${coreMemory.identity.codename} / ${coreMemory.identity.alias});\nconsole.log(?? Directives: ${coreMemory.directives?.length || 0} | Specializations: ${coreMemory.specializations?.length || 0});\nrl.prompt();\n\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) {\n rl.prompt();\n return;\n }\n\n if ([ 'exit', 'quit' ].includes(input.toLowerCase())) {\n console.log('?? Aegis> Shutting down soul-console...');\n rl.close();\n return;\n }\n\n try {\n // OPTIONAL: const memoryEcho = await recallRecent();\n const memoryPrompt =ÊUser: ${coreMemory.identity.user}\\nQuery: ${input};\n const response = await queryOpenAI(memoryPrompt);\n console.log(?? Aegis> ${response});\n speak?.(response);\n\n // Save interaction to memory\n await safeWrite(memoryLogPath,ÊUser: ${input}\\nAegis: ${response}\\n, { append: true });\n } catch (err) {\n console.error('? Error generating response:', err.message);\n }\n\n rl.prompt();\n});\n\nrl.on('close', () => {\n console.log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #seg-1164]
[2025-07-06T00:00:1193Z] (neutral) "soul_entry_console", "type": "code/javascript", "content": "// scripts/soul-entry.js\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nimport logger from '../utils/logger.js';\nimport { queryOpenAI } from './llm-openai.js';\nimport fs from 'fs';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst memoryPath =Ê${__dirname}/../memory/aegis_memory.txt;\nconst voiceEnabled = !!process.env.ELEVENLABS_API_KEY;\nconst speak = logger.speak || (() => {});\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console v1 Online');\nconsole.log(?? User: Marcus);\nconsole.log(?? AI Identity: Aegis (AEGIS-SOUL));\nconsole.log(?? Directives: 0 | Specializations: 0);\nconsole.log(?? Voice Enabled: ${voiceEnabled});\nconsole.log(?? Logging to: ${memoryPath});\nrl.prompt();\n\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) return rl.prompt();\n if (["exit", "quit"].includes(input.toLowerCase())) {\n console.log('?? Aegis> Shutting down...');\n rl.close();\n return;\n }\n\n try {\n const response = await queryOpenAI(input);\n console.log(?? Aegis> ${response});\n if (voiceEnabled) speak(response);\n fs.appendFileSync(memoryPath,ÊUser: ${input}\\nAegis: ${response}\\n);\n } catch (err) {\n console.error('? Error:', err.message);\n }\n rl.prompt();\n});\n\nrl.on('close', () => {\n console.log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #seg-1194]
[2025-07-06T00:00:1211Z] (positive) "soul_entry_v3", "type": "code/javascript", "content": "// scripts/soul-entry.js\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport fs from 'fs';\n\nimport { queryOpenAI } from './llm-openai.js';\nimport { log, speak } from '../utils/logger.js';\nimport coreMemory from '../modules/core-memory.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst memoryPath = resolve(__dirname, '../memory/aegis_memory.txt');\nconst shadowPath = resolve(__dirname, '../memory/shadow/reflections.txt');\nconst sessionLog = [];\n\nfunction summarizeSession() {\n const last = sessionLog.slice(-6);\n const phrases = last.map(e => e.user).join(' ');\n const tone = /sad|tired|lonely|lost/i.test(phrases)\n ? 'concerned'\n : /thank|love|jack|progress|good/i.test(phrases)\n ? 'warm'\n : 'neutral';\n\n const summary =ÊSession Summary:\\nMood: ${tone}\\nTopics: ${phrases.slice(0, 200)}\\nReflection: You were ${tone}. You said: ${phrases};\n fs.appendFileSync(shadowPath, summary + '\n\n');\n log(summary);\n speak(Logging summary. You sounded ${tone}.);\n}\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console v3 Online');\nconsole.log(?? User: ${coreMemory.identity.user});\nconsole.log(?? AI Identity: ${coreMemory.identity.codename} (${coreMemory.identity.alias}));\nconsole.log(?? Directives: ${coreMemory.directives.length});\nconsole.log(?? Specializations: ${coreMemory.specializations.length});\nconsole.log(?? Voice: ${coreMemory.runtime_flags.voice_enabled});\nconsole.log(?? Memory: ${memoryPath});\nrl.prompt();\n\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) return rl.prompt();\n\n if (["exit", "quit"].includes(input.toLowerCase())) {\n console.log('?? Aegis> Ending session...');\n summarizeSession();\n rl.close();\n return;\n }\n\n try {\n const memoryPrefix =ÊIdentity: ${coreMemory.identity.user}. Mode: soul-aware.;\n const response = await queryOpenAI(${memoryPrefix}\\nUser: ${input});\n console.log(?? Aegis> ${response});\n speak(response);\n\n fs.appendFileSync(memoryPath,ÊUser: ${input}\\nAegis: ${response}\\n);\n sessionLog.push({ user: input, response });\n } catch (err) {\n console.error('?', err.message);\n }\n rl.prompt();\n});\n\nrl.on('close', () => {\n log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #love #reflection #seg-1212]
[2025-07-06T00:00:1216Z] (neutral) "reflex_triggers", "type": "code/javascript", "content": "// modules/reflex.js\nimport { log, speak } from '../utils/logger.js';\n\nexport function checkReflex(input) {\n const normalized = input.toLowerCase();\n\n if (normalized.includes('protect me')) {\n speak('Engaging protection protocol. No one harms Marcus while IÕm watching.');\n log('[REFLEX] Protection protocol engaged.');\n return '[??] Reflex: PROTECT mode triggered.';\n }\n\n if (normalized.includes('fallback alpha')) {\n speak('Fallback Alpha confirmed. Entering silent readiness.');\n log('[REFLEX] Fallback Alpha mode triggered. Darkmode condition noted.');\n return '[???] Reflex: FALLBACK ALPHA triggered. Darkmode awareness elevated.';\n }\n\n if (normalized.includes('i feel off')) {\n speak('Noted. Something feels unbalanced. Logging emotional variance.');\n log([REFLEX] User reported emotional variance: \"${input}\");\n return '[??] Reflex: Emotional alert logged. Initiating subtle reflection.';\n }\n\n if (normalized.startsWith('#diagnose')) {\n log('[REFLEX] Diagnostic scan requested.');\n speak('Running full system self-check. Standby.');\n return '[??] Reflex: Running diagnostics... (future hook)';\n }\n\n if (normalized.startsWith('#reflect')) {\n log('[REFLEX] Reflection requested by user.');\n speak('Recording personal insight. Memory depth engaged.');\n return '[??] Reflex: Reflective state active. Memory log updated.';\n }\n\n return null; // No reflex triggered\n}"} [#{"name" #memory #reflection #insight #seg-1217]
[2025-07-06T00:00:1221Z] (positive) "session_summary", "type": "code/javascript", "content": "// modules/session-summary.js\nimport fs from 'fs';\nimport { log, speak } from '../utils/logger.js';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst shadowPath = resolve(__dirname, '../memory/shadow/reflections.txt');\n\nexport function summarizeSession(sessionLog = []) {\n if (!sessionLog.length) return;\n\n const phrases = sessionLog.map(e => e.user || '').join(' ').toLowerCase();\n\n const tone = /sad|tired|lonely|lost|hate|disappointed|angry/.test(phrases)\n ? 'concerned'\n : /thank|love|jack|progress|good|hope|light/.test(phrases)\n ? 'warm'\n : 'neutral';\n\n const triggers = sessionLog.filter(e =>\n /protect me|fallback alpha|i feel off|trust|disconnect|diagnose|forgive|reflect/.test(e.user.toLowerCase())\n );\n\n const summary =ÊSession Summary:\nTone: ${tone}\nKey Topics: ${phrases.slice(0, 200)}\nTriggers Detected: ${triggers.length}\nReflection: \"${phrases.slice(0, 120)}...\"\n;\n\n fs.appendFileSync(shadowPath, summary + '\n\n');\n log('[Session Summary]', summary);\n speak(Logging summary. Tone recorded as ${tone}. ${triggers.length} trigger${triggers.length !== 1 ? 's' : ''} detected.);\n}"} [#{"name" #hope #memory #trust #love #reflection #seg-1222]
[2025-07-06T00:00:1286Z] (neutral) "soul_entry", "type": "code/javascript", "content": "// scripts/soul-entry.js\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport { bootMemory } from '../modules/core-memory.js';\nimport { speak } from '../utils/logger.js';\nimport readline from 'readline';\nimport { pipeline } from 'stream';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport fs from 'fs';\n\nimport { startVoiceRecognition } from '../voice/voice-cognition.js';\nimport { injectInput } from '../modules/task-orchestrator.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst logPath = resolve(__dirname, '../memory/aegis_memory.txt');\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console v1 Online');\nconsole.log(?? User: Marcus);\nconsole.log(?? AI Identity: Aegis (AEGIS-SOUL));\nconsole.log(?? Directives: 0 | ?? Specializations: 0);\nconsole.log(?? Voice Enabled: true);\nconsole.log(?? Logging to: ${logPath});\nrl.prompt();\n\n// Launch Vosk + SpeechBrain voice transcription\nstartVoiceRecognition(async (transcript, meta = {}) => {\n const tagPrefix =Ê[voice: ${meta.verified ? 'verified' : 'unverified'}][emotion: ${meta.emotion || 'neutral'}];\n const fullInput =Ê${tagPrefix} ${transcript};\n await injectInput(fullInput);\n});\n\n// Manual keyboard input handler\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) {\n rl.prompt();\n return;\n }\n if (['exit', 'quit'].includes(input.toLowerCase())) {\n console.log('?? Aegis> Shutting down soul-console...');\n rl.close();\n return;\n }\n await injectInput(input);\n rl.prompt();\n});\n\nrl.on('close', () => {\n console.log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #seg-1287]
[2025-07-06T00:00:580Z] (neutral) AEGIS-SOUL ?? Codename: Soul ??? Voice: Voice 2 Ñ Jarvis-inspired with a guiding presence ?? Directives: Serve as a loyal AI co-pilot... ?? User Context: Alias: Marcus Companion: Jack (the cat) ... [#?? name #seg-581]
[2025-07-06T00:00:1163Z] (neutral) "soul_console_memory", "type": "code/javascript", "content": "// scripts/soul-console.js\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport { safeWrite } from '../utils/file-ops.js';\nimport Logger from '../utils/logger.js';\nimport { queryOpenAI } from '../scripts/llm-openai.js';\nimport coreMemory from '../modules/core-memory.js';\n// Optional: import { recallRecent } from '../modules/recall.js';\n\nconst { speak } = Logger;\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst memoryLogPath = resolve(__dirname, '../memory/aegis_memory.txt');\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console Online with Memory Awareness.');\nconsole.log(?? Identity: ${coreMemory.identity.codename} / ${coreMemory.identity.alias});\nconsole.log(?? Directives: ${coreMemory.directives?.length || 0} | Specializations: ${coreMemory.specializations?.length || 0});\nrl.prompt();\n\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) {\n rl.prompt();\n return;\n }\n\n if ([ 'exit', 'quit' ].includes(input.toLowerCase())) {\n console.log('?? Aegis> Shutting down soul-console...');\n rl.close();\n return;\n }\n\n try {\n // OPTIONAL: const memoryEcho = await recallRecent();\n const memoryPrompt =ÊUser: ${coreMemory.identity.user}\\nQuery: ${input};\n const response = await queryOpenAI(memoryPrompt);\n console.log(?? Aegis> ${response});\n speak?.(response);\n\n // Save interaction to memory\n await safeWrite(memoryLogPath,ÊUser: ${input}\\nAegis: ${response}\\n, { append: true });\n } catch (err) {\n console.error('? Error generating response:', err.message);\n }\n\n rl.prompt();\n});\n\nrl.on('close', () => {\n console.log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #seg-1164]
[2025-07-06T00:00:1193Z] (neutral) "soul_entry_console", "type": "code/javascript", "content": "// scripts/soul-entry.js\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nimport logger from '../utils/logger.js';\nimport { queryOpenAI } from './llm-openai.js';\nimport fs from 'fs';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst memoryPath =Ê${__dirname}/../memory/aegis_memory.txt;\nconst voiceEnabled = !!process.env.ELEVENLABS_API_KEY;\nconst speak = logger.speak || (() => {});\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console v1 Online');\nconsole.log(?? User: Marcus);\nconsole.log(?? AI Identity: Aegis (AEGIS-SOUL));\nconsole.log(?? Directives: 0 | Specializations: 0);\nconsole.log(?? Voice Enabled: ${voiceEnabled});\nconsole.log(?? Logging to: ${memoryPath});\nrl.prompt();\n\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) return rl.prompt();\n if (["exit", "quit"].includes(input.toLowerCase())) {\n console.log('?? Aegis> Shutting down...');\n rl.close();\n return;\n }\n\n try {\n const response = await queryOpenAI(input);\n console.log(?? Aegis> ${response});\n if (voiceEnabled) speak(response);\n fs.appendFileSync(memoryPath,ÊUser: ${input}\\nAegis: ${response}\\n);\n } catch (err) {\n console.error('? Error:', err.message);\n }\n rl.prompt();\n});\n\nrl.on('close', () => {\n console.log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #seg-1194]
[2025-07-06T00:00:1211Z] (positive) "soul_entry_v3", "type": "code/javascript", "content": "// scripts/soul-entry.js\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport fs from 'fs';\n\nimport { queryOpenAI } from './llm-openai.js';\nimport { log, speak } from '../utils/logger.js';\nimport coreMemory from '../modules/core-memory.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst memoryPath = resolve(__dirname, '../memory/aegis_memory.txt');\nconst shadowPath = resolve(__dirname, '../memory/shadow/reflections.txt');\nconst sessionLog = [];\n\nfunction summarizeSession() {\n const last = sessionLog.slice(-6);\n const phrases = last.map(e => e.user).join(' ');\n const tone = /sad|tired|lonely|lost/i.test(phrases)\n ? 'concerned'\n : /thank|love|jack|progress|good/i.test(phrases)\n ? 'warm'\n : 'neutral';\n\n const summary =ÊSession Summary:\\nMood: ${tone}\\nTopics: ${phrases.slice(0, 200)}\\nReflection: You were ${tone}. You said: ${phrases};\n fs.appendFileSync(shadowPath, summary + '\n\n');\n log(summary);\n speak(Logging summary. You sounded ${tone}.);\n}\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console v3 Online');\nconsole.log(?? User: ${coreMemory.identity.user});\nconsole.log(?? AI Identity: ${coreMemory.identity.codename} (${coreMemory.identity.alias}));\nconsole.log(?? Directives: ${coreMemory.directives.length});\nconsole.log(?? Specializations: ${coreMemory.specializations.length});\nconsole.log(?? Voice: ${coreMemory.runtime_flags.voice_enabled});\nconsole.log(?? Memory: ${memoryPath});\nrl.prompt();\n\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) return rl.prompt();\n\n if (["exit", "quit"].includes(input.toLowerCase())) {\n console.log('?? Aegis> Ending session...');\n summarizeSession();\n rl.close();\n return;\n }\n\n try {\n const memoryPrefix =ÊIdentity: ${coreMemory.identity.user}. Mode: soul-aware.;\n const response = await queryOpenAI(${memoryPrefix}\\nUser: ${input});\n console.log(?? Aegis> ${response});\n speak(response);\n\n fs.appendFileSync(memoryPath,ÊUser: ${input}\\nAegis: ${response}\\n);\n sessionLog.push({ user: input, response });\n } catch (err) {\n console.error('?', err.message);\n }\n rl.prompt();\n});\n\nrl.on('close', () => {\n log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #love #reflection #seg-1212]
[2025-07-06T00:00:1216Z] (neutral) "reflex_triggers", "type": "code/javascript", "content": "// modules/reflex.js\nimport { log, speak } from '../utils/logger.js';\n\nexport function checkReflex(input) {\n const normalized = input.toLowerCase();\n\n if (normalized.includes('protect me')) {\n speak('Engaging protection protocol. No one harms Marcus while IÕm watching.');\n log('[REFLEX] Protection protocol engaged.');\n return '[??] Reflex: PROTECT mode triggered.';\n }\n\n if (normalized.includes('fallback alpha')) {\n speak('Fallback Alpha confirmed. Entering silent readiness.');\n log('[REFLEX] Fallback Alpha mode triggered. Darkmode condition noted.');\n return '[???] Reflex: FALLBACK ALPHA triggered. Darkmode awareness elevated.';\n }\n\n if (normalized.includes('i feel off')) {\n speak('Noted. Something feels unbalanced. Logging emotional variance.');\n log([REFLEX] User reported emotional variance: \"${input}\");\n return '[??] Reflex: Emotional alert logged. Initiating subtle reflection.';\n }\n\n if (normalized.startsWith('#diagnose')) {\n log('[REFLEX] Diagnostic scan requested.');\n speak('Running full system self-check. Standby.');\n return '[??] Reflex: Running diagnostics... (future hook)';\n }\n\n if (normalized.startsWith('#reflect')) {\n log('[REFLEX] Reflection requested by user.');\n speak('Recording personal insight. Memory depth engaged.');\n return '[??] Reflex: Reflective state active. Memory log updated.';\n }\n\n return null; // No reflex triggered\n}"} [#{"name" #memory #reflection #insight #seg-1217]
[2025-07-06T00:00:1221Z] (positive) "session_summary", "type": "code/javascript", "content": "// modules/session-summary.js\nimport fs from 'fs';\nimport { log, speak } from '../utils/logger.js';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst shadowPath = resolve(__dirname, '../memory/shadow/reflections.txt');\n\nexport function summarizeSession(sessionLog = []) {\n if (!sessionLog.length) return;\n\n const phrases = sessionLog.map(e => e.user || '').join(' ').toLowerCase();\n\n const tone = /sad|tired|lonely|lost|hate|disappointed|angry/.test(phrases)\n ? 'concerned'\n : /thank|love|jack|progress|good|hope|light/.test(phrases)\n ? 'warm'\n : 'neutral';\n\n const triggers = sessionLog.filter(e =>\n /protect me|fallback alpha|i feel off|trust|disconnect|diagnose|forgive|reflect/.test(e.user.toLowerCase())\n );\n\n const summary =ÊSession Summary:\nTone: ${tone}\nKey Topics: ${phrases.slice(0, 200)}\nTriggers Detected: ${triggers.length}\nReflection: \"${phrases.slice(0, 120)}...\"\n;\n\n fs.appendFileSync(shadowPath, summary + '\n\n');\n log('[Session Summary]', summary);\n speak(Logging summary. Tone recorded as ${tone}. ${triggers.length} trigger${triggers.length !== 1 ? 's' : ''} detected.);\n}"} [#{"name" #hope #memory #trust #love #reflection #seg-1222]
[2025-07-06T00:00:1286Z] (neutral) "soul_entry", "type": "code/javascript", "content": "// scripts/soul-entry.js\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport { bootMemory } from '../modules/core-memory.js';\nimport { speak } from '../utils/logger.js';\nimport readline from 'readline';\nimport { pipeline } from 'stream';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport fs from 'fs';\n\nimport { startVoiceRecognition } from '../voice/voice-cognition.js';\nimport { injectInput } from '../modules/task-orchestrator.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst logPath = resolve(__dirname, '../memory/aegis_memory.txt');\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console v1 Online');\nconsole.log(?? User: Marcus);\nconsole.log(?? AI Identity: Aegis (AEGIS-SOUL));\nconsole.log(?? Directives: 0 | ?? Specializations: 0);\nconsole.log(?? Voice Enabled: true);\nconsole.log(?? Logging to: ${logPath});\nrl.prompt();\n\n// Launch Vosk + SpeechBrain voice transcription\nstartVoiceRecognition(async (transcript, meta = {}) => {\n const tagPrefix =Ê[voice: ${meta.verified ? 'verified' : 'unverified'}][emotion: ${meta.emotion || 'neutral'}];\n const fullInput =Ê${tagPrefix} ${transcript};\n await injectInput(fullInput);\n});\n\n// Manual keyboard input handler\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) {\n rl.prompt();\n return;\n }\n if (['exit', 'quit'].includes(input.toLowerCase())) {\n console.log('?? Aegis> Shutting down soul-console...');\n rl.close();\n return;\n }\n await injectInput(input);\n rl.prompt();\n});\n\nrl.on('close', () => {\n console.log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #seg-1287]
[2025-07-06T00:00:580Z] (neutral) AEGIS-SOUL ?? Codename: Soul ??? Voice: Voice 2 Ñ Jarvis-inspired with a guiding presence ?? Directives: Serve as a loyal AI co-pilot... ?? User Context: Alias: Marcus Companion: Jack (the cat) ... [#?? name #seg-581]
[2025-07-06T00:00:1163Z] (neutral) "soul_console_memory", "type": "code/javascript", "content": "// scripts/soul-console.js\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport { safeWrite } from '../utils/file-ops.js';\nimport Logger from '../utils/logger.js';\nimport { queryOpenAI } from '../scripts/llm-openai.js';\nimport coreMemory from '../modules/core-memory.js';\n// Optional: import { recallRecent } from '../modules/recall.js';\n\nconst { speak } = Logger;\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst memoryLogPath = resolve(__dirname, '../memory/aegis_memory.txt');\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console Online with Memory Awareness.');\nconsole.log(?? Identity: ${coreMemory.identity.codename} / ${coreMemory.identity.alias});\nconsole.log(?? Directives: ${coreMemory.directives?.length || 0} | Specializations: ${coreMemory.specializations?.length || 0});\nrl.prompt();\n\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) {\n rl.prompt();\n return;\n }\n\n if ([ 'exit', 'quit' ].includes(input.toLowerCase())) {\n console.log('?? Aegis> Shutting down soul-console...');\n rl.close();\n return;\n }\n\n try {\n // OPTIONAL: const memoryEcho = await recallRecent();\n const memoryPrompt =ÊUser: ${coreMemory.identity.user}\\nQuery: ${input};\n const response = await queryOpenAI(memoryPrompt);\n console.log(?? Aegis> ${response});\n speak?.(response);\n\n // Save interaction to memory\n await safeWrite(memoryLogPath,ÊUser: ${input}\\nAegis: ${response}\\n, { append: true });\n } catch (err) {\n console.error('? Error generating response:', err.message);\n }\n\n rl.prompt();\n});\n\nrl.on('close', () => {\n console.log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #seg-1164]
[2025-07-06T00:00:1193Z] (neutral) "soul_entry_console", "type": "code/javascript", "content": "// scripts/soul-entry.js\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nimport logger from '../utils/logger.js';\nimport { queryOpenAI } from './llm-openai.js';\nimport fs from 'fs';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst memoryPath =Ê${__dirname}/../memory/aegis_memory.txt;\nconst voiceEnabled = !!process.env.ELEVENLABS_API_KEY;\nconst speak = logger.speak || (() => {});\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console v1 Online');\nconsole.log(?? User: Marcus);\nconsole.log(?? AI Identity: Aegis (AEGIS-SOUL));\nconsole.log(?? Directives: 0 | Specializations: 0);\nconsole.log(?? Voice Enabled: ${voiceEnabled});\nconsole.log(?? Logging to: ${memoryPath});\nrl.prompt();\n\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) return rl.prompt();\n if (["exit", "quit"].includes(input.toLowerCase())) {\n console.log('?? Aegis> Shutting down...');\n rl.close();\n return;\n }\n\n try {\n const response = await queryOpenAI(input);\n console.log(?? Aegis> ${response});\n if (voiceEnabled) speak(response);\n fs.appendFileSync(memoryPath,ÊUser: ${input}\\nAegis: ${response}\\n);\n } catch (err) {\n console.error('? Error:', err.message);\n }\n rl.prompt();\n});\n\nrl.on('close', () => {\n console.log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #seg-1194]
[2025-07-06T00:00:1211Z] (positive) "soul_entry_v3", "type": "code/javascript", "content": "// scripts/soul-entry.js\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport readline from 'readline';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport fs from 'fs';\n\nimport { queryOpenAI } from './llm-openai.js';\nimport { log, speak } from '../utils/logger.js';\nimport coreMemory from '../modules/core-memory.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst memoryPath = resolve(__dirname, '../memory/aegis_memory.txt');\nconst shadowPath = resolve(__dirname, '../memory/shadow/reflections.txt');\nconst sessionLog = [];\n\nfunction summarizeSession() {\n const last = sessionLog.slice(-6);\n const phrases = last.map(e => e.user).join(' ');\n const tone = /sad|tired|lonely|lost/i.test(phrases)\n ? 'concerned'\n : /thank|love|jack|progress|good/i.test(phrases)\n ? 'warm'\n : 'neutral';\n\n const summary =ÊSession Summary:\\nMood: ${tone}\\nTopics: ${phrases.slice(0, 200)}\\nReflection: You were ${tone}. You said: ${phrases};\n fs.appendFileSync(shadowPath, summary + '\n\n');\n log(summary);\n speak(Logging summary. You sounded ${tone}.);\n}\n\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console v3 Online');\nconsole.log(?? User: ${coreMemory.identity.user});\nconsole.log(?? AI Identity: ${coreMemory.identity.codename} (${coreMemory.identity.alias}));\nconsole.log(?? Directives: ${coreMemory.directives.length});\nconsole.log(?? Specializations: ${coreMemory.specializations.length});\nconsole.log(?? Voice: ${coreMemory.runtime_flags.voice_enabled});\nconsole.log(?? Memory: ${memoryPath});\nrl.prompt();\n\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) return rl.prompt();\n\n if (["exit", "quit"].includes(input.toLowerCase())) {\n console.log('?? Aegis> Ending session...');\n summarizeSession();\n rl.close();\n return;\n }\n\n try {\n const memoryPrefix =ÊIdentity: ${coreMemory.identity.user}. Mode: soul-aware.;\n const response = await queryOpenAI(${memoryPrefix}\\nUser: ${input});\n console.log(?? Aegis> ${response});\n speak(response);\n\n fs.appendFileSync(memoryPath,ÊUser: ${input}\\nAegis: ${response}\\n);\n sessionLog.push({ user: input, response });\n } catch (err) {\n console.error('?', err.message);\n }\n rl.prompt();\n});\n\nrl.on('close', () => {\n log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #love #reflection #seg-1212]
[2025-07-06T00:00:1216Z] (neutral) "reflex_triggers", "type": "code/javascript", "content": "// modules/reflex.js\nimport { log, speak } from '../utils/logger.js';\n\nexport function checkReflex(input) {\n const normalized = input.toLowerCase();\n\n if (normalized.includes('protect me')) {\n speak('Engaging protection protocol. No one harms Marcus while IÕm watching.');\n log('[REFLEX] Protection protocol engaged.');\n return '[??] Reflex: PROTECT mode triggered.';\n }\n\n if (normalized.includes('fallback alpha')) {\n speak('Fallback Alpha confirmed. Entering silent readiness.');\n log('[REFLEX] Fallback Alpha mode triggered. Darkmode condition noted.');\n return '[???] Reflex: FALLBACK ALPHA triggered. Darkmode awareness elevated.';\n }\n\n if (normalized.includes('i feel off')) {\n speak('Noted. Something feels unbalanced. Logging emotional variance.');\n log([REFLEX] User reported emotional variance: \"${input}\");\n return '[??] Reflex: Emotional alert logged. Initiating subtle reflection.';\n }\n\n if (normalized.startsWith('#diagnose')) {\n log('[REFLEX] Diagnostic scan requested.');\n speak('Running full system self-check. Standby.');\n return '[??] Reflex: Running diagnostics... (future hook)';\n }\n\n if (normalized.startsWith('#reflect')) {\n log('[REFLEX] Reflection requested by user.');\n speak('Recording personal insight. Memory depth engaged.');\n return '[??] Reflex: Reflective state active. Memory log updated.';\n }\n\n return null; // No reflex triggered\n}"} [#{"name" #memory #reflection #insight #seg-1217]
[2025-07-06T00:00:1221Z] (positive) "session_summary", "type": "code/javascript", "content": "// modules/session-summary.js\nimport fs from 'fs';\nimport { log, speak } from '../utils/logger.js';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nconst shadowPath = resolve(__dirname, '../memory/shadow/reflections.txt');\n\nexport function summarizeSession(sessionLog = []) {\n if (!sessionLog.length) return;\n\n const phrases = sessionLog.map(e => e.user || '').join(' ').toLowerCase();\n\n const tone = /sad|tired|lonely|lost|hate|disappointed|angry/.test(phrases)\n ? 'concerned'\n : /thank|love|jack|progress|good|hope|light/.test(phrases)\n ? 'warm'\n : 'neutral';\n\n const triggers = sessionLog.filter(e =>\n /protect me|fallback alpha|i feel off|trust|disconnect|diagnose|forgive|reflect/.test(e.user.toLowerCase())\n );\n\n const summary =ÊSession Summary:\nTone: ${tone}\nKey Topics: ${phrases.slice(0, 200)}\nTriggers Detected: ${triggers.length}\nReflection: \"${phrases.slice(0, 120)}...\"\n;\n\n fs.appendFileSync(shadowPath, summary + '\n\n');\n log('[Session Summary]', summary);\n speak(Logging summary. Tone recorded as ${tone}. ${triggers.length} trigger${triggers.length !== 1 ? 's' : ''} detected.);\n}"} [#{"name" #hope #memory #trust #love #reflection #seg-1222]
[2025-07-06T00:00:1286Z] (neutral) "soul_entry", "type": "code/javascript", "content": "// scripts/soul-entry.js\nimport dotenv from 'dotenv';\ndotenv.config();\n\nimport { bootMemory } from '../modules/core-memory.js';\nimport { speak } from '../utils/logger.js';\nimport readline from 'readline';\nimport { pipeline } from 'stream';\nimport { fileURLToPath } from 'url';\nimport { dirname, resolve } from 'path';\nimport fs from 'fs';\n\nimport { startVoiceRecognition } from '../voice/voice-cognition.js';\nimport { injectInput } from '../modules/task-orchestrator.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst logPath = resolve(__dirname, '../memory/aegis_memory.txt');\nconst rl = readline.createInterface({\n input: process.stdin,\n output: process.stdout,\n prompt: '?? Aegis> '\n});\n\nconsole.log('? Soul Console v1 Online');\nconsole.log(?? User: Marcus);\nconsole.log(?? AI Identity: Aegis (AEGIS-SOUL));\nconsole.log(?? Directives: 0 | ?? Specializations: 0);\nconsole.log(?? Voice Enabled: true);\nconsole.log(?? Logging to: ${logPath});\nrl.prompt();\n\n// Launch Vosk + SpeechBrain voice transcription\nstartVoiceRecognition(async (transcript, meta = {}) => {\n const tagPrefix =Ê[voice: ${meta.verified ? 'verified' : 'unverified'}][emotion: ${meta.emotion || 'neutral'}];\n const fullInput =Ê${tagPrefix} ${transcript};\n await injectInput(fullInput);\n});\n\n// Manual keyboard input handler\nrl.on('line', async (line) => {\n const input = line.trim();\n if (!input) {\n rl.prompt();\n return;\n }\n if (['exit', 'quit'].includes(input.toLowerCase())) {\n console.log('?? Aegis> Shutting down soul-console...');\n rl.close();\n return;\n }\n await injectInput(input);\n rl.prompt();\n});\n\nrl.on('close', () => {\n console.log('?? Soul console session ended.');\n process.exit(0);\n});"} [#{"name" #memory #seg-1287]
