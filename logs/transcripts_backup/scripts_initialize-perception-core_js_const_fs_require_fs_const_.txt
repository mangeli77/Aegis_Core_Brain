[2025-07-06T00:00:488Z] (neutral) \${state} | Mood: \${mood} | Presence: \${presence}\`); } // Every 5 seconds, re-evaluate perception state setInterval(evaluateState, 5000); module.exports = { getState: () => state }; `; fs.writeFileSync(perceptionPath, perceptionCode); console.log('?? Created perception-core.js'); // 2. UPDATE snapshot_phase_32.task if (fs.existsSync(snapshotPath)) { const task = JSON.parse(fs.readFileSync(snapshotPath, 'utf8')); if (!task.linked_modules.includes('perception-core.js')) { task.linked_modules.push('perception-core.js'); fs.writeFileSync(snapshotPath, JSON.stringify(task, null, 2)); console.log('?? Updated snapshot_phase_32.task'); } } else { console.log('?? snapshot_phase_32.task not found.'); } [#// scripts/initialize-perception-core.js const fs = require('fs'); const path = require('path'); const root = path.join(__dirname, '..'); const modulesdir = path.join(root, 'modules'); const logdir = path.join(root, '.lockpoint', 'phase_32', 'logs'); const perceptionpath = path.join(modulesdir, 'perception-core.js'); const snapshotpath = path.join(root, 'queue', 'snapshot_phase_32.task'); // 1. create perception-core.js const perceptioncode = `// modules/perception-core.js const observer = require('./observer'); const sentiment = require('./sentiment'); const signal = require('./signal'); const fs = require('fs'); const path = require('path'); const logpath = path.join(__dirname, '..', '.lockpoint', 'phase_32', 'logs', 'perception.log'); let state = 'idle'; function logperception(entry) { const timestamp = new date().toisostring(); const line = \`\${timestamp} | \${entry}\\n\`; fs.appendfilesync(logpath, line); } function evaluatestate() { const presence = observer.getpresence(); // true/false const mood = sentiment.getcurrentmood(); // e.g., 'neutral', 'positive', 'tense' if (!presence) { state = 'idle'; } else if (presence && mood === 'neutral') { state = 'present'; } else if (presence && mood === 'positive') { state = 'engaged'; } else { state = 'reflective'; } signal.setwaveform(state); logperception(\`state #seg-489]
[2025-07-06T00:00:488Z] (neutral) \${state} | Mood: \${mood} | Presence: \${presence}\`); } // Every 5 seconds, re-evaluate perception state setInterval(evaluateState, 5000); module.exports = { getState: () => state }; `; fs.writeFileSync(perceptionPath, perceptionCode); console.log('?? Created perception-core.js'); // 2. UPDATE snapshot_phase_32.task if (fs.existsSync(snapshotPath)) { const task = JSON.parse(fs.readFileSync(snapshotPath, 'utf8')); if (!task.linked_modules.includes('perception-core.js')) { task.linked_modules.push('perception-core.js'); fs.writeFileSync(snapshotPath, JSON.stringify(task, null, 2)); console.log('?? Updated snapshot_phase_32.task'); } } else { console.log('?? snapshot_phase_32.task not found.'); } [#// scripts/initialize-perception-core.js const fs = require('fs'); const path = require('path'); const root = path.join(__dirname, '..'); const modulesdir = path.join(root, 'modules'); const logdir = path.join(root, '.lockpoint', 'phase_32', 'logs'); const perceptionpath = path.join(modulesdir, 'perception-core.js'); const snapshotpath = path.join(root, 'queue', 'snapshot_phase_32.task'); // 1. create perception-core.js const perceptioncode = `// modules/perception-core.js const observer = require('./observer'); const sentiment = require('./sentiment'); const signal = require('./signal'); const fs = require('fs'); const path = require('path'); const logpath = path.join(__dirname, '..', '.lockpoint', 'phase_32', 'logs', 'perception.log'); let state = 'idle'; function logperception(entry) { const timestamp = new date().toisostring(); const line = \`\${timestamp} | \${entry}\\n\`; fs.appendfilesync(logpath, line); } function evaluatestate() { const presence = observer.getpresence(); // true/false const mood = sentiment.getcurrentmood(); // e.g., 'neutral', 'positive', 'tense' if (!presence) { state = 'idle'; } else if (presence && mood === 'neutral') { state = 'present'; } else if (presence && mood === 'positive') { state = 'engaged'; } else { state = 'reflective'; } signal.setwaveform(state); logperception(\`state #seg-489]
