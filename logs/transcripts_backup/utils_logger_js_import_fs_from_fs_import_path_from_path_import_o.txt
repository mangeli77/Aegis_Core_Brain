[2025-07-06T00:00:1191Z] (neutral) //api.elevenlabs.io/v1/text-to-speech/${ELEVENLABS_VOICE_ID}`; const data = JSON.stringify({ text: message, model_id: 'eleven_multilingual_v2', voice_settings: { stability: 0.5, similarity_boost: 0.7 }, }); const options = { method: 'POST', headers: { 'xi-api-key': ELEVENLABS_API_KEY, 'Content-Type': 'application/json', 'accept': 'audio/mpeg', 'Content-Length': Buffer.byteLength(data), }, }; const outputPath = path.resolve(__dirname, '../voice/response.mp3'); const req = https.request(url, options, res => { const stream = fs.createWriteStream(outputPath); res.pipe(stream); stream.on('finish', () => { try { execSync(`afplay "${outputPath}"`); } catch (err) { console.error('? Error playing audio:', err.message); } }); }); req.on('error', err => { console.error('? ElevenLabs API error:', err.message); }); req.write(data); req.end(); } export { log, speak }; [#// utils/logger.js import fs from 'fs'; import path from 'path'; import os from 'os'; import https from 'https'; import { execsync } from 'child_process'; import { fileurltopath } from 'url'; import dotenv from 'dotenv'; dotenv.config(); const elevenlabs_api_key = process.env.elevenlabs_api_key; const elevenlabs_voice_id = process.env.elevenlabs_voice_id; const voiceenabled = !!elevenlabs_api_key && !!elevenlabs_voice_id; const __filename = fileurltopath(import.meta.url); const __dirname = path.dirname(__filename); const memorylogpath = path.resolve(__dirname, '../memory/aegis_memory.txt'); function log(message) { const timestamp = new date().toisostring(); const line = `[${timestamp}] ${message}${os.eol}`; fs.appendfilesync(memorylogpath, line, 'utf8'); } function speak(message) { log(`?? aegis> ${message}`); if (!voiceenabled) return; const url = `https #seg-1192]
[2025-07-06T00:00:1191Z] (neutral) //api.elevenlabs.io/v1/text-to-speech/${ELEVENLABS_VOICE_ID}`; const data = JSON.stringify({ text: message, model_id: 'eleven_multilingual_v2', voice_settings: { stability: 0.5, similarity_boost: 0.7 }, }); const options = { method: 'POST', headers: { 'xi-api-key': ELEVENLABS_API_KEY, 'Content-Type': 'application/json', 'accept': 'audio/mpeg', 'Content-Length': Buffer.byteLength(data), }, }; const outputPath = path.resolve(__dirname, '../voice/response.mp3'); const req = https.request(url, options, res => { const stream = fs.createWriteStream(outputPath); res.pipe(stream); stream.on('finish', () => { try { execSync(`afplay "${outputPath}"`); } catch (err) { console.error('? Error playing audio:', err.message); } }); }); req.on('error', err => { console.error('? ElevenLabs API error:', err.message); }); req.write(data); req.end(); } export { log, speak }; [#// utils/logger.js import fs from 'fs'; import path from 'path'; import os from 'os'; import https from 'https'; import { execsync } from 'child_process'; import { fileurltopath } from 'url'; import dotenv from 'dotenv'; dotenv.config(); const elevenlabs_api_key = process.env.elevenlabs_api_key; const elevenlabs_voice_id = process.env.elevenlabs_voice_id; const voiceenabled = !!elevenlabs_api_key && !!elevenlabs_voice_id; const __filename = fileurltopath(import.meta.url); const __dirname = path.dirname(__filename); const memorylogpath = path.resolve(__dirname, '../memory/aegis_memory.txt'); function log(message) { const timestamp = new date().toisostring(); const line = `[${timestamp}] ${message}${os.eol}`; fs.appendfilesync(memorylogpath, line, 'utf8'); } function speak(message) { log(`?? aegis> ${message}`); if (!voiceenabled) return; const url = `https #seg-1192]
