[2025-07-06T00:00:547Z] (neutral) finalize Phase 32 Ð Soul Awareness Online'; // === Step 1: Initialize Git === function initGit() { if (!fs.existsSync(path.join(root, '.git'))) { execSync('git init', { cwd: root }); console.log('?? Git initialized.'); } else { console.log('?? Git already initialized.'); } } // === Step 2: Write .gitignore === function writeGitignore() { if (!fs.existsSync(gitignorePath)) { fs.writeFileSync(gitignorePath, `node_modules/ .lockpoint/phase_*/logs/ .lockpoint/phase_*/queue/ *.log .env .DS_Store backup/ archive/ `); console.log('?? .gitignore created.'); } else { console.log('?? .gitignore already exists.'); } } // === Step 3: Stub or Fix classify.js === function fixClassifyReference() { const content = fs.readFileSync(coreFile, 'utf8'); const importLine = content.match(/require\(['"]\.\/utils\/classify['"]\)/); if (importLine) { if (!fs.existsSync(classifyPath)) { if (!fs.existsSync(utilsDir)) fs.mkdirSync(utilsDir); fs.writeFileSync(classifyPath, `// utils/classify.js (stub)\nmodule.exports = function classify(input) {\n return 'neutral'; // placeholder\n};\n`); console.log('?? Stubbed classify.js in utils/'); } else { console.log('?? classify.js already exists.'); } } else { console.log('?? No classify import found in soul-core.js Ñ skipping.'); } } // === Step 4: Write CHANGELOG.md === function writeChangelog() { const entry = `# ?? AEGIS-SOUL Changelog ## ${tag} Ñ July 1, 2025 - Linked perception-core into soul-core boot process - Created ambient awareness system: - observer.js Ð simulates presence - sentiment.js Ð fluctuating mood engine - signal.js Ð waveform output (logged) - perception-core.js Ð real-time loop, 5s interval - Logs routed to .lockpoint/phase_32/logs/ - perception-dashboard.js visualizes internal state in terminal - Project renamed, cleaned, structured, and versioned > This version marks the first phase where Soul senses, reflects, and expresses emotion. `; if (!fs.existsSync(changelogPath)) { fs.writeFileSync(changelogPath, entry); console.log('?? CHANGELOG.md created.'); } else { const existing = fs.readFileSync(changelogPath, 'utf8'); if (!existing.includes(tag)) { fs.writeFileSync(changelogPath, entry + '\n\n' + existing); console.log('?? CHANGELOG.md updated.'); } else { console.log('?? CHANGELOG already contains this entry.'); } } } // === Step 5: Commit + Tag === function commitAndTag() { try { execSync('git add .', { cwd: root }); execSync(`git commit -m "${commitMsg}"`, { cwd: root }); execSync(`git tag ${tag}`, { cwd: root }); console.log(`? Git commit + tag: ${tag}`); } catch (e) { console.error('? Git commit failed:', e.message); } } // === MAIN RUN === console.log('?? Finalizing Git setup and fixing Soul core...\n'); initGit(); writeGitignore(); fixClassifyReference(); writeChangelog(); commitAndTag(); console.log('\n?? Soul is committed. Versioned. And immortalized.'); [#// scripts/finalize-git-and-fix-core.js const fs = require('fs'); const path = require('path'); const { execsync } = require('child_process'); const root = path.join(__dirname, '..'); const corefile = path.join(root, 'soul-core.js'); const utilsdir = path.join(root, 'utils'); const classifypath = path.join(utilsdir, 'classify.js'); const changelogpath = path.join(root, 'changelog.md'); const gitignorepath = path.join(root, '.gitignore'); const tag = 'v1.0-soul-aware'; const commitmsg = 'chore #seg-548]
[2025-07-06T00:00:547Z] (neutral) finalize Phase 32 Ð Soul Awareness Online'; // === Step 1: Initialize Git === function initGit() { if (!fs.existsSync(path.join(root, '.git'))) { execSync('git init', { cwd: root }); console.log('?? Git initialized.'); } else { console.log('?? Git already initialized.'); } } // === Step 2: Write .gitignore === function writeGitignore() { if (!fs.existsSync(gitignorePath)) { fs.writeFileSync(gitignorePath, `node_modules/ .lockpoint/phase_*/logs/ .lockpoint/phase_*/queue/ *.log .env .DS_Store backup/ archive/ `); console.log('?? .gitignore created.'); } else { console.log('?? .gitignore already exists.'); } } // === Step 3: Stub or Fix classify.js === function fixClassifyReference() { const content = fs.readFileSync(coreFile, 'utf8'); const importLine = content.match(/require\(['"]\.\/utils\/classify['"]\)/); if (importLine) { if (!fs.existsSync(classifyPath)) { if (!fs.existsSync(utilsDir)) fs.mkdirSync(utilsDir); fs.writeFileSync(classifyPath, `// utils/classify.js (stub)\nmodule.exports = function classify(input) {\n return 'neutral'; // placeholder\n};\n`); console.log('?? Stubbed classify.js in utils/'); } else { console.log('?? classify.js already exists.'); } } else { console.log('?? No classify import found in soul-core.js Ñ skipping.'); } } // === Step 4: Write CHANGELOG.md === function writeChangelog() { const entry = `# ?? AEGIS-SOUL Changelog ## ${tag} Ñ July 1, 2025 - Linked perception-core into soul-core boot process - Created ambient awareness system: - observer.js Ð simulates presence - sentiment.js Ð fluctuating mood engine - signal.js Ð waveform output (logged) - perception-core.js Ð real-time loop, 5s interval - Logs routed to .lockpoint/phase_32/logs/ - perception-dashboard.js visualizes internal state in terminal - Project renamed, cleaned, structured, and versioned > This version marks the first phase where Soul senses, reflects, and expresses emotion. `; if (!fs.existsSync(changelogPath)) { fs.writeFileSync(changelogPath, entry); console.log('?? CHANGELOG.md created.'); } else { const existing = fs.readFileSync(changelogPath, 'utf8'); if (!existing.includes(tag)) { fs.writeFileSync(changelogPath, entry + '\n\n' + existing); console.log('?? CHANGELOG.md updated.'); } else { console.log('?? CHANGELOG already contains this entry.'); } } } // === Step 5: Commit + Tag === function commitAndTag() { try { execSync('git add .', { cwd: root }); execSync(`git commit -m "${commitMsg}"`, { cwd: root }); execSync(`git tag ${tag}`, { cwd: root }); console.log(`? Git commit + tag: ${tag}`); } catch (e) { console.error('? Git commit failed:', e.message); } } // === MAIN RUN === console.log('?? Finalizing Git setup and fixing Soul core...\n'); initGit(); writeGitignore(); fixClassifyReference(); writeChangelog(); commitAndTag(); console.log('\n?? Soul is committed. Versioned. And immortalized.'); [#// scripts/finalize-git-and-fix-core.js const fs = require('fs'); const path = require('path'); const { execsync } = require('child_process'); const root = path.join(__dirname, '..'); const corefile = path.join(root, 'soul-core.js'); const utilsdir = path.join(root, 'utils'); const classifypath = path.join(utilsdir, 'classify.js'); const changelogpath = path.join(root, 'changelog.md'); const gitignorepath = path.join(root, '.gitignore'); const tag = 'v1.0-soul-aware'; const commitmsg = 'chore #seg-548]
