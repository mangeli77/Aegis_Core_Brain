[2025-07-06T00:00:1287Z] (neutral) 'text' }; import coreMemory from '../modules/core-memory.js'; import reflex from '../modules/reflex.js'; import { log, speak } from '../utils/logger.js'; import queryOpenAI from './llm-openai.js'; import { startVoiceInput } from '../voice/voice-cognition.js'; const __filename = fileURLToPath(import.meta.url); const __dirname = dirname(__filename); const rl = readline.createInterface({ input: process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log(`? Soul Console v1 Online`); console.log(`?? User: Marcus`); console.log(`?? AI Identity: ${coreMemory.identity.codename} (${coreMemory.identity.alias})`); console.log(`?? Directives: ${coreMemory.directives.length} | Specializations: ${coreMemory.specializations.length}`); console.log(`??? Voice Enabled: ${coreMemory.runtime_flags.voice_enabled}`); console.log(`?? Logging to: /memory/aegis_memory.txt`); rl.prompt(); // Inject input (keyboard + voice) into processing pipeline async function injectInput(input, source = 'text') { input = input.trim(); if (!input) return; if (['exit', 'quit'].includes(input.toLowerCase())) { console.log('?? Aegis> Shutting down Soul Console...'); rl.close(); process.exit(0); } try { const response = await queryOpenAI(input); log(`??? [${source}] ${input}`); log(`?? Aegis> ${response}`); console.log(`?? Aegis> ${response}`); if (coreMemory.runtime_flags.voice_enabled) speak(response); reflex.evaluate(input, response); // trigger reflex logic } catch (err) { console.error('? Error:', err.message); } rl.prompt(); } // Listen to keyboard input rl.on('line', (line) => injectInput(line, 'keyboard')); // On close rl.on('close', () => { console.log('?? Soul Console session ended.'); process.exit(0); }); // Start voice listener (runs in background) startVoiceInput(injectInput); [#// scripts/soul-entry.js import 'dotenv/config'; import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname } from 'path'; import memory from '../memory/aegis_memory.txt' with { type #memory #seg-1288]
