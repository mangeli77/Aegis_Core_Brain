[2025-07-06T00:00:1010Z] (neutral) ${filePath}`); } } folders.forEach(dir => { const fullDir = path.join(root, dir); if (!fs.existsSync(fullDir)) return; fs.readdirSync(fullDir).forEach(file => { if (file.endsWith('.js')) { const fullPath = path.join(fullDir, file); fixImports(fullPath); } }); }); console.log('?? Import path cleanup complete.'); [#// scripts/fix-import-paths.js import fs from 'fs'; import path from 'path'; const root = path.join(process.cwd()); const folders = ['modules', 'scripts']; const badpatterns = [ /import\s+{?\s*log\s*}?\s+from\s+['\"]\.\.\/aegis-soul\.js['\"]/g, /import\s+corememory\s+from\s+['\"]\.\.\/aegis-soul\.js['\"]/g, /import\s+{?\s*readfilesafe\s*}?\s+from\s+['\"]\.\.\/aegis-soul\.js['\"]/g ]; const replacementline = `import corememory, { log } from '../modules/core-memory.js';`; function fiximports(filepath) { let content = fs.readfilesync(filepath, 'utf-8'); let original = content; badpatterns.foreach(pattern => { content = content.replace(pattern, replacementline); }); if (content !== original) { fs.writefilesync(filepath, content, 'utf-8'); console.log(`? updated #seg-1011]
[2025-07-06T00:00:1010Z] (neutral) ${filePath}`); } } folders.forEach(dir => { const fullDir = path.join(root, dir); if (!fs.existsSync(fullDir)) return; fs.readdirSync(fullDir).forEach(file => { if (file.endsWith('.js')) { const fullPath = path.join(fullDir, file); fixImports(fullPath); } }); }); console.log('?? Import path cleanup complete.'); [#// scripts/fix-import-paths.js import fs from 'fs'; import path from 'path'; const root = path.join(process.cwd()); const folders = ['modules', 'scripts']; const badpatterns = [ /import\s+{?\s*log\s*}?\s+from\s+['\"]\.\.\/aegis-soul\.js['\"]/g, /import\s+corememory\s+from\s+['\"]\.\.\/aegis-soul\.js['\"]/g, /import\s+{?\s*readfilesafe\s*}?\s+from\s+['\"]\.\.\/aegis-soul\.js['\"]/g ]; const replacementline = `import corememory, { log } from '../modules/core-memory.js';`; function fiximports(filepath) { let content = fs.readfilesync(filepath, 'utf-8'); let original = content; badpatterns.foreach(pattern => { content = content.replace(pattern, replacementline); }); if (content !== original) { fs.writefilesync(filepath, content, 'utf-8'); console.log(`? updated #seg-1011]
