[2025-07-06T00:00:498Z] (neutral) () => present }; `; fs.writeFileSync(path.join(modulesDir, 'observer.js'), content); console.log('??? Stubbed observer.js'); } function writeSentimentStub() { const moods = ['neutral', 'positive', 'tense', 'curious', 'warm']; let current = 'neutral'; setInterval(() => { const idx = Math.floor(Math.random() * moods.length); current = moods[idx]; }, 6000); const content = `// modules/sentiment.js (stub) let currentMood = 'neutral'; const moods = ['neutral', 'positive', 'tense', 'curious', 'warm']; setInterval(() => { currentMood = moods[Math.floor(Math.random() * moods.length)]; }, 6000); module.exports = { getCurrentMood: () => currentMood }; `; fs.writeFileSync(path.join(modulesDir, 'sentiment.js'), content); console.log('?? Stubbed sentiment.js'); } function writeSignalStub() { const content = `// modules/signal.js (stub) const fs = require('fs'); const path = require('path'); const logPath = path.join(__dirname, '..', '.lockpoint', 'phase_32', 'logs', 'visual.log'); module.exports = { setWaveform: (state) => { const line = \`\${new Date().toISOString()} | [signal] waveform: \${state}\\n\`; fs.appendFileSync(logPath, line); } }; `; fs.writeFileSync(path.join(modulesDir, 'signal.js'), content); console.log('?? Stubbed signal.js'); } // Run them writeObserverStub(); writeSentimentStub(); writeSignalStub(); console.log('\n? All perception modules stubbed. Soul is now simulating input.'); [#// scripts/stub-perception-modules.js const fs = require('fs'); const path = require('path'); const modulesdir = path.join(__dirname, '..', 'modules'); function writeobserverstub() { const content = `// modules/observer.js (stub) let present = false; setinterval(() => { present = math.random() > 0.4; // ~60% chance of presence }, 4000); module.exports = { getpresence #seg-499]
[2025-07-06T00:00:498Z] (neutral) () => present }; `; fs.writeFileSync(path.join(modulesDir, 'observer.js'), content); console.log('??? Stubbed observer.js'); } function writeSentimentStub() { const moods = ['neutral', 'positive', 'tense', 'curious', 'warm']; let current = 'neutral'; setInterval(() => { const idx = Math.floor(Math.random() * moods.length); current = moods[idx]; }, 6000); const content = `// modules/sentiment.js (stub) let currentMood = 'neutral'; const moods = ['neutral', 'positive', 'tense', 'curious', 'warm']; setInterval(() => { currentMood = moods[Math.floor(Math.random() * moods.length)]; }, 6000); module.exports = { getCurrentMood: () => currentMood }; `; fs.writeFileSync(path.join(modulesDir, 'sentiment.js'), content); console.log('?? Stubbed sentiment.js'); } function writeSignalStub() { const content = `// modules/signal.js (stub) const fs = require('fs'); const path = require('path'); const logPath = path.join(__dirname, '..', '.lockpoint', 'phase_32', 'logs', 'visual.log'); module.exports = { setWaveform: (state) => { const line = \`\${new Date().toISOString()} | [signal] waveform: \${state}\\n\`; fs.appendFileSync(logPath, line); } }; `; fs.writeFileSync(path.join(modulesDir, 'signal.js'), content); console.log('?? Stubbed signal.js'); } // Run them writeObserverStub(); writeSentimentStub(); writeSignalStub(); console.log('\n? All perception modules stubbed. Soul is now simulating input.'); [#// scripts/stub-perception-modules.js const fs = require('fs'); const path = require('path'); const modulesdir = path.join(__dirname, '..', 'modules'); function writeobserverstub() { const content = `// modules/observer.js (stub) let present = false; setinterval(() => { present = math.random() > 0.4; // ~60% chance of presence }, 4000); module.exports = { getpresence #seg-499]
