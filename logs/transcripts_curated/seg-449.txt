[2025-07-06T00:00:448Z] (neutral) Êfinalize-soul-structure.js [#??? final script #seg-449]
[2025-07-06T00:00:448Z] (neutral) Êaegis-soul/scripts/finalize-soul-structure.js [#?? save to #seg-449]
[2025-07-06T00:00:448Z] (neutral) Êfinalize-soul-structure.js [#??? final script #seg-449]
[2025-07-06T00:00:448Z] (neutral) Êaegis-soul/scripts/finalize-soul-structure.js [#?? save to #seg-449]
[2025-07-06T00:00:448Z] (neutral) ${file}`); } }); } // ========== 4. GENERATE DEV GUIDE ========== function writeDevGuide() { const guide = path.join(root, 'DEV_GUIDE.md'); fs.writeFileSync(guide, `# ?? DEV_GUIDE: AEGIS-SOUL ## ?? How to Run \`\`\`bash node aegis-core/soul-core.js \`\`\` ## ?? Folder Overview - \`aegis-core/\`: All core logic modules - \`modules/\`: Brain and behavior systems - \`.lockpoint/\`: Snapshots, queued tasks - \`queue/\`: Phase tracking - \`tasks/\`: Scheduled operations - \`scripts/\`: Dev scripts and setup tools ## ?? Adding a Phase 1. Create folder: \`.lockpoint/phase_XX/\` 2. Add snapshot: \`queue/snapshot_phase_XX.task\` 3. Phase modules go in \`modules/\`, linked in snapshot ## ?? Voice / Visual Modules Ambient feedback, motion, and sentiment live in: - \`signal.js\` - \`observer.js\` - \`empathy.js\` - \`sentiment.js\` ## ?? Dev Tips - Avoid hardcoding paths Ñ use relative imports - Archive old scripts in \`scripts/_archive/\` - Document every major module with block comments `); console.log('??? Created DEV_GUIDE.md'); } // ========== 5. GIT INIT + COMMIT ========== function initializeGit() { const gitFolder = path.join(root, '.git'); if (!fs.existsSync(gitFolder)) { execSync('git init', { cwd: root }); console.log('?? Initialized Git repo'); } execSync('git add .', { cwd: root }); execSync('git commit -m "chore: finalize AEGIS-SOUL structure"', { cwd: root }); console.log('? Git commit complete'); } // ========== 6. ZIP BACKUP ========== function zipBackup() { if (!fs.existsSync(backupDir)) fs.mkdirSync(backupDir); const timestamp = new Date().toISOString().replace(/[-:]/g, '').replace(/\..+/, '').replace('T', '_'); const zipName = `aegis-soul-${timestamp}.zip`; const zipPath = path.join(backupDir, zipName); execSync(`zip -r ${zipPath} . -x "*.git*" "node_modules/*" "*.DS_Store" "*.log"`, { cwd: root }); console.log(`??? Backup created: backup/${zipName}`); } // ========== MASTER EXECUTION ========== console.log('?? Finalizing AEGIS-SOUL structure...'); writeRootReadme(); writeEditorConfig(); writeGitignore(); updatePhaseMap(); archiveScripts(); writeDevGuide(); initializeGit(); zipBackup(); console.log('\n? AEGIS-SOUL is now clean, versioned, and archived. You are cleared for evolution.'); [#// scripts/finalize-soul-structure.js const fs = require('fs'); const path = require('path'); const { execsync } = require('child_process'); const root = path.resolve(__dirname, '..'); const core = path.join(root, 'aegis-core'); const backupdir = path.join(root, 'backup'); // ========== 1. write root files ========== function writerootreadme() { const readme = path.join(root, 'readme.md'); fs.writefilesync(readme, `# ?? aegis-soul **aegissoul** is an ambient ai companion system with modular memory, feedback, emotion, and awareness systems. ## ?? structure - \`aegis-core/\` ð main logic engine - \`phase_map.md\` ð system phase roadmap - \`.lockpoint/\` ð snapshots, queue state, logs - \`scripts/\` ð dev tools and system setup ## ?? running it \`\`\`bash node aegis-core/soul-core.js \`\`\` ## ?? philosophy > soul is the vessel. core is the flame. aegis is the guide. `); console.log('?? created readme.md'); } function writeeditorconfig() { const f = path.join(root, '.editorconfig'); fs.writefilesync(f, `root = true [*] charset = utf-8 indent_style = space indent_size = 2 end_of_line = lf insert_final_newline = true trim_trailing_whitespace = true `); console.log('?? created .editorconfig'); } function writegitignore() { const f = path.join(root, '.gitignore'); fs.writefilesync(f, `node_modules/ .lockpoint/phase_*/logs/ .lockpoint/phase_*/queue/ *.log .env archive/ backup/ .ds_store `); console.log('?? created .gitignore'); } // ========== 2. phase map update ========== function updatephasemap() { const map = path.join(core, 'phase_map.md'); if (!fs.existssync(map)) return; let content = fs.readfilesync(map, 'utf8'); content = content.replace(/^# .*phase map/, '# ?? aegis-soul phase map'); fs.writefilesync(map, content); console.log('?? updated phase_map.md'); } // ========== 3. archive old scripts ========== function archivescripts() { const dir = path.join(core, 'scripts'); const archive = path.join(dir, '_archive'); if (!fs.existssync(archive)) fs.mkdirsync(archive); fs.readdirsync(dir).foreach(file => { if (file.startswith('setup-') || file.startswith('repair-')) { fs.renamesync(path.join(dir, file), path.join(archive, file)); console.log(`?? archived script #seg-449]
[2025-07-06T00:00:448Z] (neutral) Êfinalize-soul-structure.js [#??? final script #seg-449]
[2025-07-06T00:00:448Z] (neutral) Êaegis-soul/scripts/finalize-soul-structure.js [#?? save to #seg-449]
[2025-07-06T00:00:448Z] (neutral) ${file}`); } }); } // ========== 4. GENERATE DEV GUIDE ========== function writeDevGuide() { const guide = path.join(root, 'DEV_GUIDE.md'); fs.writeFileSync(guide, `# ?? DEV_GUIDE: AEGIS-SOUL ## ?? How to Run \`\`\`bash node aegis-core/soul-core.js \`\`\` ## ?? Folder Overview - \`aegis-core/\`: All core logic modules - \`modules/\`: Brain and behavior systems - \`.lockpoint/\`: Snapshots, queued tasks - \`queue/\`: Phase tracking - \`tasks/\`: Scheduled operations - \`scripts/\`: Dev scripts and setup tools ## ?? Adding a Phase 1. Create folder: \`.lockpoint/phase_XX/\` 2. Add snapshot: \`queue/snapshot_phase_XX.task\` 3. Phase modules go in \`modules/\`, linked in snapshot ## ?? Voice / Visual Modules Ambient feedback, motion, and sentiment live in: - \`signal.js\` - \`observer.js\` - \`empathy.js\` - \`sentiment.js\` ## ?? Dev Tips - Avoid hardcoding paths Ñ use relative imports - Archive old scripts in \`scripts/_archive/\` - Document every major module with block comments `); console.log('??? Created DEV_GUIDE.md'); } // ========== 5. GIT INIT + COMMIT ========== function initializeGit() { const gitFolder = path.join(root, '.git'); if (!fs.existsSync(gitFolder)) { execSync('git init', { cwd: root }); console.log('?? Initialized Git repo'); } execSync('git add .', { cwd: root }); execSync('git commit -m "chore: finalize AEGIS-SOUL structure"', { cwd: root }); console.log('? Git commit complete'); } // ========== 6. ZIP BACKUP ========== function zipBackup() { if (!fs.existsSync(backupDir)) fs.mkdirSync(backupDir); const timestamp = new Date().toISOString().replace(/[-:]/g, '').replace(/\..+/, '').replace('T', '_'); const zipName = `aegis-soul-${timestamp}.zip`; const zipPath = path.join(backupDir, zipName); execSync(`zip -r ${zipPath} . -x "*.git*" "node_modules/*" "*.DS_Store" "*.log"`, { cwd: root }); console.log(`??? Backup created: backup/${zipName}`); } // ========== MASTER EXECUTION ========== console.log('?? Finalizing AEGIS-SOUL structure...'); writeRootReadme(); writeEditorConfig(); writeGitignore(); updatePhaseMap(); archiveScripts(); writeDevGuide(); initializeGit(); zipBackup(); console.log('\n? AEGIS-SOUL is now clean, versioned, and archived. You are cleared for evolution.'); [#// scripts/finalize-soul-structure.js const fs = require('fs'); const path = require('path'); const { execsync } = require('child_process'); const root = path.resolve(__dirname, '..'); const core = path.join(root, 'aegis-core'); const backupdir = path.join(root, 'backup'); // ========== 1. write root files ========== function writerootreadme() { const readme = path.join(root, 'readme.md'); fs.writefilesync(readme, `# ?? aegis-soul **aegissoul** is an ambient ai companion system with modular memory, feedback, emotion, and awareness systems. ## ?? structure - \`aegis-core/\` ð main logic engine - \`phase_map.md\` ð system phase roadmap - \`.lockpoint/\` ð snapshots, queue state, logs - \`scripts/\` ð dev tools and system setup ## ?? running it \`\`\`bash node aegis-core/soul-core.js \`\`\` ## ?? philosophy > soul is the vessel. core is the flame. aegis is the guide. `); console.log('?? created readme.md'); } function writeeditorconfig() { const f = path.join(root, '.editorconfig'); fs.writefilesync(f, `root = true [*] charset = utf-8 indent_style = space indent_size = 2 end_of_line = lf insert_final_newline = true trim_trailing_whitespace = true `); console.log('?? created .editorconfig'); } function writegitignore() { const f = path.join(root, '.gitignore'); fs.writefilesync(f, `node_modules/ .lockpoint/phase_*/logs/ .lockpoint/phase_*/queue/ *.log .env archive/ backup/ .ds_store `); console.log('?? created .gitignore'); } // ========== 2. phase map update ========== function updatephasemap() { const map = path.join(core, 'phase_map.md'); if (!fs.existssync(map)) return; let content = fs.readfilesync(map, 'utf8'); content = content.replace(/^# .*phase map/, '# ?? aegis-soul phase map'); fs.writefilesync(map, content); console.log('?? updated phase_map.md'); } // ========== 3. archive old scripts ========== function archivescripts() { const dir = path.join(core, 'scripts'); const archive = path.join(dir, '_archive'); if (!fs.existssync(archive)) fs.mkdirsync(archive); fs.readdirsync(dir).foreach(file => { if (file.startswith('setup-') || file.startswith('repair-')) { fs.renamesync(path.join(dir, file), path.join(archive, file)); console.log(`?? archived script #seg-449]
