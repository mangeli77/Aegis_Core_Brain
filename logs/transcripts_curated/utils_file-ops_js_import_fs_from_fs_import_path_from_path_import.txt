[2025-07-06T00:00:1001Z] (neutral) ${filePath}`); } catch (err) { log(`? Write error at ${filePath}: ${err.message}`, 'error'); } } function safeRead(filePath) { try { return fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf-8') : ''; } catch (err) { log(`? Read error at ${filePath}: ${err.message}`, 'error'); return ''; } } function backupFile(filePath) { if (!fs.existsSync(filePath)) return; const backupDir = path.join(path.dirname(filePath), 'backups'); if (!fs.existsSync(backupDir)) fs.mkdirSync(backupDir); const timestamp = new Date().toISOString().replace(/[:.]/g, '-'); const backupPath = path.join(backupDir, `${path.basename(filePath)}-${timestamp}.bak`); try { fs.copyFileSync(filePath, backupPath); log(`?? Backup created: ${backupPath}`); } catch (err) { log(`? Backup error: ${err.message}`, 'error'); } } export { safeWrite, safeRead, backupFile }; [#// utils/file-ops.js import fs from 'fs'; import path from 'path'; import { log } from './logger.js'; function safewrite(filepath, data) { try { fs.writefilesync(filepath, data, 'utf-8'); log(`?? file written #seg-1002]
[2025-07-06T00:00:1001Z] (neutral) ${filePath}`); } catch (err) { log(`? Write error at ${filePath}: ${err.message}`, 'error'); } } function safeRead(filePath) { try { return fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf-8') : ''; } catch (err) { log(`? Read error at ${filePath}: ${err.message}`, 'error'); return ''; } } function backupFile(filePath) { if (!fs.existsSync(filePath)) return; const backupDir = path.join(path.dirname(filePath), 'backups'); if (!fs.existsSync(backupDir)) fs.mkdirSync(backupDir); const timestamp = new Date().toISOString().replace(/[:.]/g, '-'); const backupPath = path.join(backupDir, `${path.basename(filePath)}-${timestamp}.bak`); try { fs.copyFileSync(filePath, backupPath); log(`?? Backup created: ${backupPath}`); } catch (err) { log(`? Backup error: ${err.message}`, 'error'); } } export { safeWrite, safeRead, backupFile }; [#// utils/file-ops.js import fs from 'fs'; import path from 'path'; import { log } from './logger.js'; function safewrite(filepath, data) { try { fs.writefilesync(filepath, data, 'utf-8'); log(`?? file written #seg-1002]
