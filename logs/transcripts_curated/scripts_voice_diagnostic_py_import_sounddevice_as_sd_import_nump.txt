[2025-07-06T00:00:2043Z] (neutral) ") devices = sd.query_devices() input_devices = [d for d in devices if d['max_input_channels'] > 0] for idx, dev in enumerate(input_devices): print(f" [{idx}] {dev['name']}") if not input_devices: print("? No input devices found.") exit(1) print("\n? Mic device(s) found.") duration = 3 # seconds fs = 16000 print(f"\n?? Recording {duration} seconds from default mic...") recording = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='int16') sd.wait() print("? Recording complete.") # Save to temp WAV file temp_dir = "samples" os.makedirs(temp_dir, exist_ok=True) test_path = os.path.join(temp_dir, "test_input.wav") ref_path = os.path.join(temp_dir, "speaker_reference.wav") with wave.open(test_path, 'w') as wf: wf.setnchannels(1) wf.setsampwidth(2) wf.setframerate(fs) wf.writeframes(recording.tobytes()) # === ANALYZE === if not os.path.exists(ref_path): # Save the first test as the reference if it doesn't exist print("?? No reference found. Saving current recording as speaker_reference.wav") os.rename(test_path, ref_path) exit(0) print("\n?? Running SpeechBrain analysis...") result = analyze(test_path, ref_path) print(f"? Match Score: {result['match_score']}") print(f"?? Verified Match: {result['verified']}") print(f"?? Emotion Detected: {result['emotion']}") [## scripts/voice_diagnostic.py import sounddevice as sd import numpy as np import os import wave from scripts.speechbrain_core import analyze print("??? voice diagnostic starting...") # === mic test === print("\n?? checking available audio input devices #seg-2044]
[2025-07-06T00:00:2127Z] (neutral) print("\n??? Testing microphone input...") try: duration = 2 # seconds fs = 16000 print("?? Speak into your microphone for 2 seconds...") recording = sd.rec(int(duration * fs), samplerate=fs, channels=1) sd.wait() if np.any(recording): print("? Microphone recording successful.") else: print("? Microphone recorded silence.") except Exception as e: print(f"? Microphone error: {e}") def test_analysis_pipeline(): print("\n?? Testing speechbrain pipeline...") try: result = analyze("samples/test_input.wav", "samples/speaker_reference.wav") print("? Analyze function ran successfully.") print(f"?? Match Score: {result['match_score']}") print(f"? Verified: {result['verified']}") print(f"?? Emotion: {result['emotion']}") except Exception as e: print(f"? Analyze function failed: {e}") if __name__ == "__main__": print("=== ?? AEGIS VOICE DIAGNOSTIC ===") test_microphone() test_analysis_pipeline() [## scripts/voice_diagnostic.py import sounddevice as sd import numpy as np import soundfile as sf from scripts.speechbrain_core import analyze def test_microphone() #seg-2128]
[2025-07-06T00:00:2043Z] (neutral) ") devices = sd.query_devices() input_devices = [d for d in devices if d['max_input_channels'] > 0] for idx, dev in enumerate(input_devices): print(f" [{idx}] {dev['name']}") if not input_devices: print("? No input devices found.") exit(1) print("\n? Mic device(s) found.") duration = 3 # seconds fs = 16000 print(f"\n?? Recording {duration} seconds from default mic...") recording = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='int16') sd.wait() print("? Recording complete.") # Save to temp WAV file temp_dir = "samples" os.makedirs(temp_dir, exist_ok=True) test_path = os.path.join(temp_dir, "test_input.wav") ref_path = os.path.join(temp_dir, "speaker_reference.wav") with wave.open(test_path, 'w') as wf: wf.setnchannels(1) wf.setsampwidth(2) wf.setframerate(fs) wf.writeframes(recording.tobytes()) # === ANALYZE === if not os.path.exists(ref_path): # Save the first test as the reference if it doesn't exist print("?? No reference found. Saving current recording as speaker_reference.wav") os.rename(test_path, ref_path) exit(0) print("\n?? Running SpeechBrain analysis...") result = analyze(test_path, ref_path) print(f"? Match Score: {result['match_score']}") print(f"?? Verified Match: {result['verified']}") print(f"?? Emotion Detected: {result['emotion']}") [## scripts/voice_diagnostic.py import sounddevice as sd import numpy as np import os import wave from scripts.speechbrain_core import analyze print("??? voice diagnostic starting...") # === mic test === print("\n?? checking available audio input devices #seg-2044]
[2025-07-06T00:00:2127Z] (neutral) print("\n??? Testing microphone input...") try: duration = 2 # seconds fs = 16000 print("?? Speak into your microphone for 2 seconds...") recording = sd.rec(int(duration * fs), samplerate=fs, channels=1) sd.wait() if np.any(recording): print("? Microphone recording successful.") else: print("? Microphone recorded silence.") except Exception as e: print(f"? Microphone error: {e}") def test_analysis_pipeline(): print("\n?? Testing speechbrain pipeline...") try: result = analyze("samples/test_input.wav", "samples/speaker_reference.wav") print("? Analyze function ran successfully.") print(f"?? Match Score: {result['match_score']}") print(f"? Verified: {result['verified']}") print(f"?? Emotion: {result['emotion']}") except Exception as e: print(f"? Analyze function failed: {e}") if __name__ == "__main__": print("=== ?? AEGIS VOICE DIAGNOSTIC ===") test_microphone() test_analysis_pipeline() [## scripts/voice_diagnostic.py import sounddevice as sd import numpy as np import soundfile as sf from scripts.speechbrain_core import analyze def test_microphone() #seg-2128]
