[2025-07-06T00:00:1212Z] (neutral) ?Êscripts/soul-entry.jsÊ(Final Version) [#system #seg-1213]
[2025-07-06T00:00:1212Z] (neutral) ?Êscripts/soul-entry.jsÊ(Final Version) [#system #seg-1213]
[2025-07-06T00:00:1212Z] (positive) /thank|love|jack|progress|good/i.test(phrases) ? 'warm' : 'neutral'; const summary = `Session Summary:\nMood: ${tone}\nTopics: ${phrases.slice(0, 200)}\nReflection: You were ${tone}. You said: ${phrases}`; fs.appendFileSync(shadowPath, summary + '\n\n'); log(summary); speak(`Logging summary. You sounded ${tone}.`); } const rl = readline.createInterface({ input: process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console v3 Online'); console.log(`?? User: ${coreMemory.identity.user}`); console.log(`?? AI Identity: ${coreMemory.identity.codename} (${coreMemory.identity.alias})`); console.log(`?? Directives: ${coreMemory.directives.length}`); console.log(`?? Specializations: ${coreMemory.specializations.length}`); console.log(`?? Voice: ${coreMemory.runtime_flags.voice_enabled}`); console.log(`?? Memory: ${memoryPath}`); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) return rl.prompt(); if (["exit", "quit"].includes(input.toLowerCase())) { console.log('?? Aegis> Ending session...'); summarizeSession(); rl.close(); return; } try { const memoryPrefix = `Identity: ${coreMemory.identity.user}. Mode: soul-aware.`; const response = await queryOpenAI(`${memoryPrefix}\nUser: ${input}`); console.log(`?? Aegis> ${response}`); speak(response); fs.appendFileSync(memoryPath, `User: ${input}\nAegis: ${response}\n`); sessionLog.push({ user: input, response }); } catch (err) { console.error('?', err.message); } rl.prompt(); }); rl.on('close', () => { log('?? Soul console session ended.'); process.exit(0); }); [#import dotenv from 'dotenv'; dotenv.config(); import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname, resolve } from 'path'; import fs from 'fs'; import { queryopenai } from './llm-openai.js'; import { log, speak } from '../utils/logger.js'; import corememory from '../modules/core-memory.js'; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const memorypath = resolve(__dirname, '../memory/aegis_memory.txt'); const shadowpath = resolve(__dirname, '../memory/shadow/reflections.txt'); const sessionlog = []; function summarizesession() { const last = sessionlog.slice(-6); const phrases = last.map(e => e.user).join(' '); const tone = /sad|tired|lonely|lost/i.test(phrases) ? 'concerned' #memory #love #reflection #seg-1213]
[2025-07-06T00:00:1212Z] (neutral) ?Êscripts/soul-entry.jsÊ(Final Version) [#system #seg-1213]
[2025-07-06T00:00:1212Z] (positive) /thank|love|jack|progress|good/i.test(phrases) ? 'warm' : 'neutral'; const summary = `Session Summary:\nMood: ${tone}\nTopics: ${phrases.slice(0, 200)}\nReflection: You were ${tone}. You said: ${phrases}`; fs.appendFileSync(shadowPath, summary + '\n\n'); log(summary); speak(`Logging summary. You sounded ${tone}.`); } const rl = readline.createInterface({ input: process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console v3 Online'); console.log(`?? User: ${coreMemory.identity.user}`); console.log(`?? AI Identity: ${coreMemory.identity.codename} (${coreMemory.identity.alias})`); console.log(`?? Directives: ${coreMemory.directives.length}`); console.log(`?? Specializations: ${coreMemory.specializations.length}`); console.log(`?? Voice: ${coreMemory.runtime_flags.voice_enabled}`); console.log(`?? Memory: ${memoryPath}`); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) return rl.prompt(); if (["exit", "quit"].includes(input.toLowerCase())) { console.log('?? Aegis> Ending session...'); summarizeSession(); rl.close(); return; } try { const memoryPrefix = `Identity: ${coreMemory.identity.user}. Mode: soul-aware.`; const response = await queryOpenAI(`${memoryPrefix}\nUser: ${input}`); console.log(`?? Aegis> ${response}`); speak(response); fs.appendFileSync(memoryPath, `User: ${input}\nAegis: ${response}\n`); sessionLog.push({ user: input, response }); } catch (err) { console.error('?', err.message); } rl.prompt(); }); rl.on('close', () => { log('?? Soul console session ended.'); process.exit(0); }); [#import dotenv from 'dotenv'; dotenv.config(); import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname, resolve } from 'path'; import fs from 'fs'; import { queryopenai } from './llm-openai.js'; import { log, speak } from '../utils/logger.js'; import corememory from '../modules/core-memory.js'; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const memorypath = resolve(__dirname, '../memory/aegis_memory.txt'); const shadowpath = resolve(__dirname, '../memory/shadow/reflections.txt'); const sessionlog = []; function summarizesession() { const last = sessionlog.slice(-6); const phrases = last.map(e => e.user).join(' '); const tone = /sad|tired|lonely|lost/i.test(phrases) ? 'concerned' #memory #love #reflection #seg-1213]
