[2025-07-06T00:00:1115Z] (neutral)  [#?? cleaned + working version ofêsoul-console.js #seg-1116]
[2025-07-06T00:00:1115Z] (neutral)  [#?? cleaned + working version ofêsoul-console.js #seg-1116]
[2025-07-06T00:00:1115Z] (neutral) process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console Online. Ask anything, Marcus.'); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) { rl.prompt(); return; } if (['exit', 'quit'].includes(input.toLowerCase())) { console.log('?? Aegis> Shutting down soul-console...'); rl.close(); return; } try { const response = await queryOpenAI(input); // Replace with your working LLM method console.log(`?? Aegis> ${response}`); speak?.(response); // Optional speech output } catch (err) { console.error('? Error generating response:', err.message); } rl.prompt(); }); rl.on('close', () => { console.log('?? Soul console session ended.'); process.exit(0); }); [#// scripts/soul-console.js import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname } from 'path'; import logger from '../utils/logger.js'; // commonjs default import import { queryopenai } from './llm-openai.js'; // or swap with your actual handler const { speak } = logger; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const rl = readline.createinterface({ input #seg-1116]
[2025-07-06T00:00:1115Z] (neutral)  [#?? cleaned + working version ofêsoul-console.js #seg-1116]
[2025-07-06T00:00:1115Z] (neutral) process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); console.log('? Soul Console Online. Ask anything, Marcus.'); rl.prompt(); rl.on('line', async (line) => { const input = line.trim(); if (!input) { rl.prompt(); return; } if (['exit', 'quit'].includes(input.toLowerCase())) { console.log('?? Aegis> Shutting down soul-console...'); rl.close(); return; } try { const response = await queryOpenAI(input); // Replace with your working LLM method console.log(`?? Aegis> ${response}`); speak?.(response); // Optional speech output } catch (err) { console.error('? Error generating response:', err.message); } rl.prompt(); }); rl.on('close', () => { console.log('?? Soul console session ended.'); process.exit(0); }); [#// scripts/soul-console.js import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname } from 'path'; import logger from '../utils/logger.js'; // commonjs default import import { queryopenai } from './llm-openai.js'; // or swap with your actual handler const { speak } = logger; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const rl = readline.createinterface({ input #seg-1116]
