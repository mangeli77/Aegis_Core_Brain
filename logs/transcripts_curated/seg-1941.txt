[2025-07-06T00:00:1940Z] (neutral) ?Êvoice-diagnostic.jsÊ(Place inside yourÊ/scriptsÊor root directory) [#system #seg-1941]
[2025-07-06T00:00:1940Z] (neutral) ?Êvoice-diagnostic.jsÊ(Place inside yourÊ/scriptsÊor root directory) [#system #seg-1941]
[2025-07-06T00:00:1940Z] (neutral) ', MODEL_PATH); return false; } try { const model = new vosk.Model(MODEL_PATH); console.log('? Vosk model loaded'); return true; } catch (err) { console.error('? Failed to load Vosk model:', err.message); return false; } } function checkMic() { return new Promise((resolve) => { try { const micInstance = mic({ rate: '16000', channels: '1', debug: false, exitOnSilence: 2 }); const stream = micInstance.getAudioStream(); let started = false; stream.on('data', () => { if (!started) { console.log('? Mic input stream active'); started = true; micInstance.stop(); resolve(true); } }); stream.on('error', (err) => { console.log('? Mic stream error:', err.message); resolve(false); }); micInstance.start(); // Timeout after 3 seconds setTimeout(() => { if (!started) { console.log('? Mic stream timed out'); micInstance.stop(); resolve(false); } }, 3000); } catch (err) { console.log('? Mic check failed:', err.message); resolve(false); } }); } function checkPythonBridge() { return new Promise((resolve) => { const subprocess = spawn('python3', ['scripts/speechbrain-core.py', 'samples/test.wav', 'samples/ref.wav']); subprocess.stdout.on('data', (data) => { const out = data.toString(); if (out.includes('verified') || out.includes('emotion')) { console.log('? Python subprocess returned data'); resolve(true); } }); subprocess.stderr.on('data', (err) => { console.log('? Python stderr:', err.toString()); }); subprocess.on('exit', (code) => { if (code !== 0) { console.log('? Python subprocess exited with code', code); resolve(false); } }); }); } // ?? Run checks await checkVoskModel(); await checkMic(); await checkPythonBridge(); [#// scripts/voice-diagnostic.js import { existssync } from 'fs'; import { spawn } from 'child_process'; import mic from 'mic'; import path from 'path'; import { createrequire } from 'module'; const require = createrequire(import.meta.url); let vosk; try { vosk = require('vosk'); } catch (err) { console.error('? vosk module not found'); process.exit(1); } const model_path = '/users/aegis/public/drop box/vosk-model-en-us-0.22'; console.log('\n?? aegis full voice diagnostic\n'); function checkvoskmodel() { if (!existssync(model_path)) { console.log('? vosk model path not found #seg-1941]
[2025-07-06T00:00:1940Z] (neutral) ?Êvoice-diagnostic.jsÊ(Place inside yourÊ/scriptsÊor root directory) [#system #seg-1941]
[2025-07-06T00:00:1940Z] (neutral) ', MODEL_PATH); return false; } try { const model = new vosk.Model(MODEL_PATH); console.log('? Vosk model loaded'); return true; } catch (err) { console.error('? Failed to load Vosk model:', err.message); return false; } } function checkMic() { return new Promise((resolve) => { try { const micInstance = mic({ rate: '16000', channels: '1', debug: false, exitOnSilence: 2 }); const stream = micInstance.getAudioStream(); let started = false; stream.on('data', () => { if (!started) { console.log('? Mic input stream active'); started = true; micInstance.stop(); resolve(true); } }); stream.on('error', (err) => { console.log('? Mic stream error:', err.message); resolve(false); }); micInstance.start(); // Timeout after 3 seconds setTimeout(() => { if (!started) { console.log('? Mic stream timed out'); micInstance.stop(); resolve(false); } }, 3000); } catch (err) { console.log('? Mic check failed:', err.message); resolve(false); } }); } function checkPythonBridge() { return new Promise((resolve) => { const subprocess = spawn('python3', ['scripts/speechbrain-core.py', 'samples/test.wav', 'samples/ref.wav']); subprocess.stdout.on('data', (data) => { const out = data.toString(); if (out.includes('verified') || out.includes('emotion')) { console.log('? Python subprocess returned data'); resolve(true); } }); subprocess.stderr.on('data', (err) => { console.log('? Python stderr:', err.toString()); }); subprocess.on('exit', (code) => { if (code !== 0) { console.log('? Python subprocess exited with code', code); resolve(false); } }); }); } // ?? Run checks await checkVoskModel(); await checkMic(); await checkPythonBridge(); [#// scripts/voice-diagnostic.js import { existssync } from 'fs'; import { spawn } from 'child_process'; import mic from 'mic'; import path from 'path'; import { createrequire } from 'module'; const require = createrequire(import.meta.url); let vosk; try { vosk = require('vosk'); } catch (err) { console.error('? vosk module not found'); process.exit(1); } const model_path = '/users/aegis/public/drop box/vosk-model-en-us-0.22'; console.log('\n?? aegis full voice diagnostic\n'); function checkvoskmodel() { if (!existssync(model_path)) { console.log('? vosk model path not found #seg-1941]
