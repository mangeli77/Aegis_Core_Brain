[2025-07-06T00:00:1291Z] (neutral) ?Êscripts/soul-entry.js [#system #seg-1292]
[2025-07-06T00:00:1291Z] (neutral) (Voice + Emotion + Reflex + Memory + Response) [#system #memory #seg-1292]
[2025-07-06T00:00:1291Z] (neutral) ?Êscripts/soul-entry.js [#system #seg-1292]
[2025-07-06T00:00:1291Z] (neutral) (Voice + Emotion + Reflex + Memory + Response) [#system #memory #seg-1292]
[2025-07-06T00:00:1291Z] (neutral) process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); const sessionLog = []; console.log('? Soul Console v3 Online'); console.log(`?? User: ${coreMemory.identity.user}`); console.log(`?? Identity: ${coreMemory.identity.codename} (${coreMemory.identity.alias})`); console.log(`?? Directives: ${coreMemory.directives.length}`); console.log(`?? Specializations: ${coreMemory.specializations.length}`); console.log(`?? Voice Enabled: ${coreMemory.runtime_flags.voice_enabled}`); console.log(`?? Logging to: ${memoryLogPath}`); rl.prompt(); // ?? Inject input (voice or text) async function handleInput(input, meta = {}) { const tags = []; if (meta.verified) tags.push('[voice: verified]'); if (meta.emotion) tags.push(`[emotion: ${meta.emotion}]`); const tagged = `${tags.join(' ')} ${input}`.trim(); // Reflex check const reflexResponse = checkReflex(tagged); if (reflexResponse) { console.log(reflexResponse); sessionLog.push({ user: tagged, response: reflexResponse }); fs.appendFileSync(memoryLogPath, `User: ${tagged}\nAegis (Reflex): ${reflexResponse}\n`); speak(reflexResponse); return; } try { const memoryPrompt = `Identity: ${coreMemory.identity.user}. Soul-mode active.\nUser: ${tagged}`; const response = await queryOpenAI(memoryPrompt); console.log(`?? Aegis> ${response}`); speak(response); fs.appendFileSync(memoryLogPath, `User: ${tagged}\nAegis: ${response}\n`); sessionLog.push({ user: tagged, response }); } catch (err) { console.error('? Error:', err.message); } } // ?? Text input rl.on('line', async (line) => { await handleInput(line.trim()); rl.prompt(); }); // ??? Voice input stream (Vosk + SpeechBrain) startVoiceRecognition(async (text, meta) => { await handleInput(text, meta); }); rl.on('close', () => { log('?? Session ended.'); process.exit(0); }); [#// scripts/soul-entry.js import 'dotenv/config'; import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname, resolve } from 'path'; import fs from 'fs'; import corememory from '../modules/core-memory.js'; import { speak, log } from '../utils/logger.js'; import { queryopenai } from './llm-openai.js'; import { checkreflex } from '../modules/reflex.js'; import { startvoicerecognition } from '../voice/voice-cognition.js'; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const memorylogpath = resolve(__dirname, '../memory/aegis_memory.txt'); const rl = readline.createinterface({ input #memory #seg-1292]
[2025-07-06T00:00:1291Z] (neutral) ?Êscripts/soul-entry.js [#system #seg-1292]
[2025-07-06T00:00:1291Z] (neutral) (Voice + Emotion + Reflex + Memory + Response) [#system #memory #seg-1292]
[2025-07-06T00:00:1291Z] (neutral) process.stdin, output: process.stdout, prompt: '?? Aegis> ' }); const sessionLog = []; console.log('? Soul Console v3 Online'); console.log(`?? User: ${coreMemory.identity.user}`); console.log(`?? Identity: ${coreMemory.identity.codename} (${coreMemory.identity.alias})`); console.log(`?? Directives: ${coreMemory.directives.length}`); console.log(`?? Specializations: ${coreMemory.specializations.length}`); console.log(`?? Voice Enabled: ${coreMemory.runtime_flags.voice_enabled}`); console.log(`?? Logging to: ${memoryLogPath}`); rl.prompt(); // ?? Inject input (voice or text) async function handleInput(input, meta = {}) { const tags = []; if (meta.verified) tags.push('[voice: verified]'); if (meta.emotion) tags.push(`[emotion: ${meta.emotion}]`); const tagged = `${tags.join(' ')} ${input}`.trim(); // Reflex check const reflexResponse = checkReflex(tagged); if (reflexResponse) { console.log(reflexResponse); sessionLog.push({ user: tagged, response: reflexResponse }); fs.appendFileSync(memoryLogPath, `User: ${tagged}\nAegis (Reflex): ${reflexResponse}\n`); speak(reflexResponse); return; } try { const memoryPrompt = `Identity: ${coreMemory.identity.user}. Soul-mode active.\nUser: ${tagged}`; const response = await queryOpenAI(memoryPrompt); console.log(`?? Aegis> ${response}`); speak(response); fs.appendFileSync(memoryLogPath, `User: ${tagged}\nAegis: ${response}\n`); sessionLog.push({ user: tagged, response }); } catch (err) { console.error('? Error:', err.message); } } // ?? Text input rl.on('line', async (line) => { await handleInput(line.trim()); rl.prompt(); }); // ??? Voice input stream (Vosk + SpeechBrain) startVoiceRecognition(async (text, meta) => { await handleInput(text, meta); }); rl.on('close', () => { log('?? Session ended.'); process.exit(0); }); [#// scripts/soul-entry.js import 'dotenv/config'; import readline from 'readline'; import { fileurltopath } from 'url'; import { dirname, resolve } from 'path'; import fs from 'fs'; import corememory from '../modules/core-memory.js'; import { speak, log } from '../utils/logger.js'; import { queryopenai } from './llm-openai.js'; import { checkreflex } from '../modules/reflex.js'; import { startvoicerecognition } from '../voice/voice-cognition.js'; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const memorylogpath = resolve(__dirname, '../memory/aegis_memory.txt'); const rl = readline.createinterface({ input #memory #seg-1292]
