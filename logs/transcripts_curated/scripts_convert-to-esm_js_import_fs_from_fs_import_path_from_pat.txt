[2025-07-06T00:00:1026Z] (neutral) `${pathRef}.js`}';`; }) .replace(/module\.exports\s*=\s*(\w+);?/g, 'export default $1;') .replace(/require\(['"]dotenv['"]\)\.config\(\);?/g, 'import dotenv from \'dotenv\';\ndotenv.config();'); } // Replace old core imports code = code.replace(/from\s+['"]\.\.\/aegis-soul\.js['"]/g, "from '../modules/core-memory.js'"); code = code.replace(/from\s+['"]\.\.\/modules\/aegis-soul\.js['"]/g, "from '../modules/core-memory.js'"); // Write the file if it changed if (code !== original) { fs.writeFileSync(filePath, code, 'utf-8'); console.log(`? Updated imports in: ${filePath}`); } } folders.forEach(folder => { const dirPath = path.join(rootDir, folder); if (!fs.existsSync(dirPath)) return; fs.readdirSync(dirPath).forEach(file => { if (!file.endsWith('.js')) return; const fullPath = path.join(dirPath, file); fixFile(fullPath); // Optionally rename to .mjs if (convertToMJS) { const newPath = fullPath.replace(/\.js$/, '.mjs'); fs.renameSync(fullPath, newPath); console.log(`?? Renamed to: ${newPath}`); } }); }); console.log('\n?? All imports normalized to ESM.'); [#// scripts/convert-to-esm.js import fs from 'fs'; import path from 'path'; const rootdir = path.resolve('.'); const folders = ['modules', 'utils', 'scripts']; const convertrequiretoimport = true; const converttomjs = false; // set to true if you want to rename all files to .mjs function fixfile(filepath) { let code = fs.readfilesync(filepath, 'utf-8'); let original = code; // replace require and module.exports if (convertrequiretoimport) { code = code .replace(/const\s+(\w+)\s*=\s*require\(['"](.+?)['"]\);?/g, (match, varname, pathref) => { return `import ${varname} from '${pathref.endswith('.js') ? pathref #memory #seg-1027]
[2025-07-06T00:00:1026Z] (neutral) `${pathRef}.js`}';`; }) .replace(/module\.exports\s*=\s*(\w+);?/g, 'export default $1;') .replace(/require\(['"]dotenv['"]\)\.config\(\);?/g, 'import dotenv from \'dotenv\';\ndotenv.config();'); } // Replace old core imports code = code.replace(/from\s+['"]\.\.\/aegis-soul\.js['"]/g, "from '../modules/core-memory.js'"); code = code.replace(/from\s+['"]\.\.\/modules\/aegis-soul\.js['"]/g, "from '../modules/core-memory.js'"); // Write the file if it changed if (code !== original) { fs.writeFileSync(filePath, code, 'utf-8'); console.log(`? Updated imports in: ${filePath}`); } } folders.forEach(folder => { const dirPath = path.join(rootDir, folder); if (!fs.existsSync(dirPath)) return; fs.readdirSync(dirPath).forEach(file => { if (!file.endsWith('.js')) return; const fullPath = path.join(dirPath, file); fixFile(fullPath); // Optionally rename to .mjs if (convertToMJS) { const newPath = fullPath.replace(/\.js$/, '.mjs'); fs.renameSync(fullPath, newPath); console.log(`?? Renamed to: ${newPath}`); } }); }); console.log('\n?? All imports normalized to ESM.'); [#// scripts/convert-to-esm.js import fs from 'fs'; import path from 'path'; const rootdir = path.resolve('.'); const folders = ['modules', 'utils', 'scripts']; const convertrequiretoimport = true; const converttomjs = false; // set to true if you want to rename all files to .mjs function fixfile(filepath) { let code = fs.readfilesync(filepath, 'utf-8'); let original = code; // replace require and module.exports if (convertrequiretoimport) { code = code .replace(/const\s+(\w+)\s*=\s*require\(['"](.+?)['"]\);?/g, (match, varname, pathref) => { return `import ${varname} from '${pathref.endswith('.js') ? pathref #memory #seg-1027]
