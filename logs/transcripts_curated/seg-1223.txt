[2025-07-06T00:00:1222Z] (neutral) ??Êmodules/session-summary.js [#system #seg-1223]
[2025-07-06T00:00:1222Z] (neutral) ??Êmodules/session-summary.js [#system #seg-1223]
[2025-07-06T00:00:1222Z] (positive) /thank|love|jack|progress|good|hope|light/.test(phrases) ? 'warm' : 'neutral'; const triggers = sessionLog.filter(e => /protect me|fallback alpha|i feel off|trust|disconnect|diagnose|forgive|reflect/.test(e.user.toLowerCase()) ); const summary = `Session Summary: Tone: ${tone} Key Topics: ${phrases.slice(0, 200)} Triggers Detected: ${triggers.length} Reflection: "${phrases.slice(0, 120)}..." `; fs.appendFileSync(shadowPath, summary + '\n\n'); log('[Session Summary]', summary); speak(`Logging summary. Tone recorded as ${tone}. ${triggers.length} trigger${triggers.length !== 1 ? 's' : ''} detected.`); } [#import fs from 'fs'; import { log, speak } from '../utils/logger.js'; import { fileurltopath } from 'url'; import { dirname, resolve } from 'path'; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const shadowpath = resolve(__dirname, '../memory/shadow/reflections.txt'); export function summarizesession(sessionlog = []) { if (!sessionlog.length) return; const phrases = sessionlog.map(e => e.user || '').join(' ').tolowercase(); const tone = /sad|tired|lonely|lost|hate|disappointed|angry/.test(phrases) ? 'concerned' #hope #trust #love #reflection #seg-1223]
[2025-07-06T00:00:1222Z] (neutral) ??Êmodules/session-summary.js [#system #seg-1223]
[2025-07-06T00:00:1222Z] (positive) /thank|love|jack|progress|good|hope|light/.test(phrases) ? 'warm' : 'neutral'; const triggers = sessionLog.filter(e => /protect me|fallback alpha|i feel off|trust|disconnect|diagnose|forgive|reflect/.test(e.user.toLowerCase()) ); const summary = `Session Summary: Tone: ${tone} Key Topics: ${phrases.slice(0, 200)} Triggers Detected: ${triggers.length} Reflection: "${phrases.slice(0, 120)}..." `; fs.appendFileSync(shadowPath, summary + '\n\n'); log('[Session Summary]', summary); speak(`Logging summary. Tone recorded as ${tone}. ${triggers.length} trigger${triggers.length !== 1 ? 's' : ''} detected.`); } [#import fs from 'fs'; import { log, speak } from '../utils/logger.js'; import { fileurltopath } from 'url'; import { dirname, resolve } from 'path'; const __filename = fileurltopath(import.meta.url); const __dirname = dirname(__filename); const shadowpath = resolve(__dirname, '../memory/shadow/reflections.txt'); export function summarizesession(sessionlog = []) { if (!sessionlog.length) return; const phrases = sessionlog.map(e => e.user || '').join(' ').tolowercase(); const tone = /sad|tired|lonely|lost|hate|disappointed|angry/.test(phrases) ? 'concerned' #hope #trust #love #reflection #seg-1223]
