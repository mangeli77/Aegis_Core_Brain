import '../../../_env.mjs';

// utils/elevenlabs_tts.mjs

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
dotenv.config();

const API_KEY = process.env.ELEVENLABS_KEY;
const VOICE_ID = process.env.ELEVENLABS_VOICE || 'Rachel';
const OUTPUT_PATH = path.resolve('./voice/elevenlabs_output.mp3');

export async function speak(text = '', voice = VOICE_ID) {
  if (!API_KEY || !voice) {
    console.error('‚ùå ElevenLabs config missing: API key or Voice ID not set.');
    return;
  }

  const url = `https://api.elevenlabs.io/v1/text-to-speech/${voice}`;

  const payload = {
    text,
    model_id: 'eleven_monolingual_v1',
    voice_settings: {
      stability: 0.4,
      similarity_boost: 0.9
    }
  };

  const headers = {
    'xi-api-key': API_KEY,
    'Content-Type': 'application/json',
    'Accept': 'audio/mpeg'
  };

  try {
    console.log(`üó£Ô∏è Synthesizing with ElevenLabs voice "${voice}"...`);
    const res = await fetch(url, {
      method: 'POST',
      headers,
      body: JSON.stringify(payload)
    });

    if (!res.ok) {
      const errText = await res.text();
      throw new Error(`HTTP ${res.status}: ${errText}`);
    }

    const audioBuffer = await res.arrayBuffer();
    fs.writeFileSync(OUTPUT_PATH, Buffer.from(audioBuffer));
    console.log(`‚úÖ Audio saved to ${OUTPUT_PATH}`);

    // macOS playback (use afplay; replace if running on other OS)
    execSync(`afplay "${OUTPUT_PATH}"`);
  } catch (err) {
    console.error('‚ùå ElevenLabs TTS failed:', err.message);
  }
}
